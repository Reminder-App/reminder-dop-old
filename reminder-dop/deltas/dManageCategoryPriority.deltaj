delta dManageCategoryPriority {
	modifies br.unb.cic.reminders.model.db.DBConstants {
		removes CREATE_TABLE_STATEMENTS;
		adds public static String CREATE_TABLE_STATEMENTS[] = { "CREATE TABLE CATEGORY("
			+ "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "NAME VARCHAR(50) NOT NULL, " + "LOCKED INT NOT NULL);",

			"CREATE TABLE REMINDER ( " + "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "TEXT VARCHAR(50) NOT NULL,"
					+ "DETAILS VARCHAR(50) NULL,"
					+ "FK_CATEGORY INTEGER NOT NULL REFERENCES CATEGORY ON DELETE CASCADE," + "DATE CHAR(10) NULL,"
					+ "HOUR CHAR(5) NULL," + "PRIORITY INTEGER NOT NULL," + "DONE INTEGER NOT NULL);", };
		removes SELECT_REMINDERS;
		adds public static final String SELECT_REMINDERS = "SELECT PK, TEXT, DETAILS, FK_CATEGORY, DATE, HOUR, PRIORITY, DONE FROM REMINDER";
		removes SELECT_REMINDERS_BY_CATEGORY;
		adds public static final String SELECT_REMINDERS_BY_CATEGORY = "SELECT PK, TEXT, DETAILS, FK_CATEGORY, DATE, HOUR, PRIORITY, DONE FROM REMINDER " 
			+ "WHERE FK_CATEGORY = ?";
	}
	modifies br.unb.cic.reminders.view.FilterListFragment {
		adds import br.unb.cic.reminders.controller.PriorityFilter;
		adds import br.unb.cic.reminders.model.Priority;
		modifies listOfFilters() {
			List<ReminderFilter> filters = original();
			// Add the priorities to the filter list
			PriorityFilter highPriorityFilter = new PriorityFilter(Priority.HIGH, getActivity());
			filters.add(highPriorityFilter);
			PriorityFilter normalPriorityFilter = new PriorityFilter(Priority.NORMAL, getActivity());
			filters.add(normalPriorityFilter);
			PriorityFilter lowPriorityFilter = new PriorityFilter(Priority.LOW, getActivity());
			filters.add(lowPriorityFilter);
			return filters;
		}
	}
	modifies br.unb.cic.reminders.view.ReminderAddActivity {
		removes createReminder();
		adds private Reminder createReminder() {
			/*
			 * Since view's not passing all the information yet (priority ...), we
			 * instantiate a reminder initially passing only "text" and "date".
			 */
			Reminder reminder = new Reminder();
			try {
				reminder.setText(edtReminder.getText().toString());
				reminder.setDetails(edtDetails.getText().toString());
				reminder.setDate(edtDate.getText().toString());
				reminder.setHour(edtHour.getText().toString());
				reminder.setCategory(selectedCategory);
				reminder.setPriority(selectedPriority);
			} catch (InvalidTextException e) {
				Toast.makeText(getApplicationContext(), "Invalid text.", Toast.LENGTH_SHORT).show();
			} catch (InvalidDateException e) {
				Toast.makeText(getApplicationContext(), "Invalid date.", Toast.LENGTH_SHORT).show();
			} catch (InvalidHourException e) {
				Toast.makeText(getApplicationContext(), "Invalid time.", Toast.LENGTH_SHORT).show();
			}
			return reminder;
		}
		removes getExistingReminder();
		adds private Reminder getExistingReminder() {
			Reminder reminder = null;
	
			Intent intent = getIntent();
			String action = intent.getAction();
			String type = intent.getType();
	
			// Gets the information from the intent if it is an edit call
			if (Intent.ACTION_SEND.equals(action) && "text/plain".equals(type)) {
				previewReminderId = intent.getLongExtra("id", 0);
				String text = intent.getStringExtra("text");
				String categoryName = intent.getStringExtra("category_name");
				String categoryId = intent.getStringExtra("category_id");
				String date = intent.getStringExtra("date");
				String hour = intent.getStringExtra("hour");
				String priority = intent.getStringExtra("priority");
	
				reminder = new Reminder();
				reminder.setText(text);
				reminder.setPriority(Priority.fromCode(Integer.parseInt(priority, 10)));
				Category category = new Category();
				category.setName(categoryName);
				category.setId(Long.parseLong(categoryId));
				reminder.setCategory(category);
				reminder.setDate(date);
				reminder.setHour(hour);
				reminder.setId(previewReminderId);
			}
	
			return reminder;
		}
		removes getReminderFromIntent();
		adds private Reminder getReminderFromIntent() {
			Intent intent = getIntent();
			String action = intent.getAction();
			String type = intent.getType();
	
			/*
			 * External apps which wants to share content with "Lembretes" must
			 * follow the protocol described by the "if" below, that is, they must
			 * instantiate an intent and set:
			 * 
			 * ACTION as "br.com.positivo.reminders.ADD_REMINDER"; MIME as
			 * "text/plain";
			 * 
			 * and pass the contents through "putExtra" in the following fields:
			 * "text", "details", "category", "date", "hour" and "priority".
			 */
			if ("br.com.positivo.reminders.ADD_REMINDER".equals(action) && "text/plain".equals(type)) {
				try {
					String text = intent.getStringExtra("text");
					String details = intent.getStringExtra("details");
					String category = intent.getStringExtra("category");
					String date = intent.getStringExtra("date");
					String hour = intent.getStringExtra("hour");
					String priority = intent.getStringExtra("priority");
	
					/*
					 * Code below just validates the data supplied, since validation
					 * code is implemented in setter methods.
					 */
	
					// Would we better apply validations here?
					Reminder reminder = new Reminder();
					reminder.setText(text);
					reminder.setDetails(details);
	
					Category auxCategory = new Category();
					auxCategory.setName(category);
					reminder.setCategory(auxCategory);
	
					reminder.setDate(date);
					reminder.setHour(hour);
	
					/*
					 * Upon here, all validations were applied and we have a valid
					 * reminder. So, we return it.
					 */
					return reminder;
				} catch (InvalidFormatException e) {
					/*
					 * What would be better? 1. Return user to the calling activity.
					 * 2. Show an empty reminder's add form (implemented now).
					 */
				}
			}
			/*
			 * If this activity was not started from an external app or a valid
			 * reminder could not be derived, we simply return "null".
			 */
			return null;
		}
		removes initialize(Reminder reminder);
		adds private void initialize(Reminder reminder) {
			try {
				edtReminder = (EditText) findViewById(R.id.edtReminder);
	
				edtDetails = (EditText) findViewById(R.id.edtDetails);
	
				// edtDate = (EditText) findViewById(R.id.edtDate);
				// edtDate.addTextChangedListener(Mask.insert("##-##-####",
				// edtDate));
	
				// edtHour = (EditText) findViewById(R.id.edtHour);
				// edtHour.addTextChangedListener(Mask.insert("##:##", edtHour));
	
				spinnerPriority = getSpinnerPriority();
	
				spinnerCategory = getSpinnerCategory();
	
				if (reminder != null) {
					updateFieldsFromReminder(reminder);
				}
	
				btnSave = (Button) findViewById(R.id.btnSave);
				btnCancel = (Button) findViewById(R.id.btnCancel);
			} catch (Exception e) {
				// TODO: we really need to think about our exception handling
				// approach
				e.printStackTrace();
			}
		}
	}
}
