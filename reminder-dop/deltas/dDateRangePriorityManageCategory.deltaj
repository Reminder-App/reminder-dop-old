delta dDateRangePriorityManageCategory {
	modifies br.unb.cic.reminders.model.db.DBConstants {
		removes CREATE_TABLE_STATEMENTS;
		adds public static String CREATE_TABLE_STATEMENTS[] = { "CREATE TABLE CATEGORY("
			+ "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "NAME VARCHAR(50) NOT NULL, " + "LOCKED INT NOT NULL);",

			"CREATE TABLE REMINDER ( " + "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "TEXT VARCHAR(50) NOT NULL,"
					+ "DETAILS VARCHAR(50) NULL,"
					+ "FK_CATEGORY INTEGER NOT NULL REFERENCES CATEGORY ON DELETE CASCADE," + "INITIAL_DATE CHAR(10) NOT NULL,"
					+ "INITIAL_HOUR CHAR(5) NULL," + "FINAL_DATE CHAR(10) NOT NULL,"
					+ "FINAL_HOUR CHAR(5) NULL," + "PRIORITY INTEGER NOT NULL," + "DONE INTEGER NOT NULL);", };
	}
	modifies br.unb.cic.reminders.view.EditReminderActivity {
		removes initializeValues();
		adds @Override protected void initializeValues() {
			Intent intent = getIntent();
	
			// Gets the information from the intent if it is an edit call
			long reminderId = intent.getLongExtra("id", 0);
			String text = intent.getStringExtra("text");
			String details = intent.getStringExtra("details");
			String categoryName = intent.getStringExtra("category_name");
			String categoryId = intent.getStringExtra("category_id");
			String dateStart = intent.getStringExtra("dateStart");
			String hourStart = intent.getStringExtra("hourStart");
			String dateFinal = intent.getStringExtra("dateFinal");
			String hourFinal = intent.getStringExtra("hourFinal");
			String priority = intent.getStringExtra("priority");
	
			Category category = new Category();
			category.setId(Long.parseLong(categoryId));
			category.setName(categoryName);
	
			reminder.setId(reminderId);
			edtReminder.setText(text);
			edtDetails.setText(details);
			updateSpinnerDateHour(spinnerDateStart, dateStart);
			updateDateFromString(dateStart, false);
			updateSpinnerDateHour(spinnerTimeStart, hourStart);
			updateTimeFromString(hourStart, false);
			updateSpinnerDateHour(spinnerDateFinal, dateFinal);
			updateDateFromString(dateFinal, true);
			updateSpinnerDateHour(spinnerTimeFinal, hourFinal);
			updateTimeFromString(hourFinal, false);
			spinnerPriority.setSelection(Priority.fromCode(Integer.parseInt(priority, 10)).getCode());
			try {
				spinnerCategory.setSelection(categoryToIndex(category));
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	modifies br.unb.cic.reminders.model.Reminder {
		removes isValid();
		adds public boolean isValid() {
			return (text != null && category != null && dateStart != null && hourStart != null
					&& dateFinal != null && hourFinal != null && priority != null);
		}
	}
}