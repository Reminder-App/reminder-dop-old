delta dDateRepeat {
    modifies br.unb.cic.reminders.model.db.DefaultReminderDAO {
        removes createReminderCursor(Cursor cursor);
        //#ifdef dateRepeat
        adds private Reminder createReminderCursor(Cursor cursor) throws DBException {
            Reminder reminder = new Reminder();
            int monday = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_MONDAY_COLUMN));
            int tuesday = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_TUESDAY_COLUMN));
            int wednesday = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_WEDNESDAY_COLUMN));
            int thursday = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_THURSDAY_COLUMN));
            int friday = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_FRIDAY_COLUMN));
            int saturday = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_SATURDAY_COLUMN));
            int sunday = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_SUNDAY_COLUMN));
            String hour = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_HOUR_COLUMN));
            reminder.setMonday(monday);
            reminder.setTuesday(tuesday);
            reminder.setWednesday(wednesday);
            reminder.setThursday(thursday);
            reminder.setFriday(friday);
            reminder.setSaturday(saturday);
            reminder.setSunday(sunday);
            reminder.setHour(hour);
            return reminder;
        }
        //#endif
    }
    removes br.unb.cic.reminders.view.DatePickerDialogFragment;
    modifies br.unb.cic.reminders.view.ReminderAddActivity {
        //#ifdef dateRepeat
        adds import br.unb.cic.reminders.model.InvalidDaysException;
        adds import android.widget.CheckBox;
        //#endif
        removes edtDate;
        //#ifdef dateRepeat
        adds private CheckBox cbMonday, cbTuesday, cbWednesday, cbThursday,
            cbFriday, cbSaturday, cbSunday;
            //#endif
        removes createReminderAux();
        removes createReminderExisting(Intent intent);
        removes createReminderIntent(Intent intent);
        removes updateFieldsFromReminder(Reminder reminder);
        //#ifdef dateRepeat
        adds private Reminder createReminderAux() {
            Reminder reminder = new Reminder();
            reminder.setMonday(cbMonday.isChecked());
			reminder.setTuesday(cbTuesday.isChecked());
			reminder.setWednesday(cbWednesday.isChecked());
			reminder.setThursday(cbThursday.isChecked());
			reminder.setFriday(cbFriday.isChecked());
			reminder.setSaturday(cbSaturday.isChecked());
            try {
			    reminder.setSunday(cbSunday.isChecked());
            } catch (InvalidDaysException e) {
                Toast.makeText(getApplicationContext(), "At least one day should be checked.", Toast.LENGTH_SHORT).show();
            }
            reminder.setHour(edtHour.getText().toString());
            return reminder;
        }
        adds private Reminder createReminderExisting(Intent intent) {
            Reminder reminder = new Reminder();
            boolean monday = intent.getBooleanExtra("monday", false);
			boolean tuesday = intent.getBooleanExtra("tuesday", false);
			boolean wednesday = intent.getBooleanExtra("wednesday", false);
			boolean thursday = intent.getBooleanExtra("thursday", false);
			boolean friday = intent.getBooleanExtra("friday", false);
			boolean saturday = intent.getBooleanExtra("saturday", false);
			boolean sunday = intent.getBooleanExtra("sunday", false);
            String hour = intent.getStringExtra("hour");
            reminder.setMonday(monday);
			reminder.setTuesday(tuesday);
			reminder.setWednesday(wednesday);
			reminder.setThursday(thursday);
			reminder.setFriday(friday);
			reminder.setSaturday(saturday);
			reminder.setSunday(sunday);
            reminder.setHour(hour);
            return reminder;
        }
        adds private Reminder createReminderIntent(Intent intent) {
            Reminder reminder = new Reminder();
            boolean monday = intent.getBooleanExtra("monday", false);
            boolean tuesday = intent.getBooleanExtra("tuesday", false);
            boolean wednesday = intent.getBooleanExtra("wednesday", false);
            boolean thursday = intent.getBooleanExtra("thursday", false);
            boolean friday = intent.getBooleanExtra("friday", false);
            boolean saturday = intent.getBooleanExtra("saturday", false);
            boolean sunday = intent.getBooleanExtra("sunday", false);
            String hour = intent.getStringExtra("hour");
            reminder.setMonday(monday);
            reminder.setTuesday(tuesday);
            reminder.setWednesday(wednesday);
            reminder.setThursday(thursday);
            reminder.setFriday(friday);
            reminder.setSaturday(saturday);
            reminder.setSunday(sunday);
            reminder.setHour(hour);
            return reminder;
        }
        adds private void updateFieldsFromReminder(Reminder reminder) throws Exception {
            edtReminder.setText(reminder.getText());
            edtDetails.setText(reminder.getDetails());
            cbMonday.setChecked(reminder.isMonday());
            cbTuesday.setChecked(reminder.isTuesday());
            cbWednesday.setChecked(reminder.isWednesday());
            cbThursday.setChecked(reminder.isThursday());
            cbFriday.setChecked(reminder.isFriday());
            cbSaturday.setChecked(reminder.isSaturday());
            cbSunday.setChecked(reminder.isSunday());
            edtHour.setText(reminder.getHour());
        }
        //#endif
    }
    modifies br.unb.cic.reminders.view.ReminderArrayAdapter {
        removes rowType;
        removes LATE;
        removes TODAY;
        removes NEXT_DAYS;
        removes NO_DATE;
        //#ifdef dateRepeat
        adds private int rowType = MONDAY;
        adds public static final int MONDAY = 0;
        adds public static final int TUESDAY = 1;
        adds public static final int WEDNESDAY = 2;
        adds public static final int THURSDAY = 3;
        adds public static final int FRIDAY = 4;
        adds public static final int SATURDAY = 5;
        adds public static final int SUNDAY = 6;
        //#endif
        removes ReminderArrayAdapter(Context context, List<Reminder> objects);
        //#ifdef dateRepeat
        adds public ReminderArrayAdapter(Context context, List<Reminder> objects) {
            super(context, R.layout.reminder_row, objects);
            this.context = context;

            this.rowColor = Color.BLACK;
            this.rowType = MONDAY;
        }
        //#endif
        removes view(int position, TextView tvReminder, LinearLayout reminderRow);
        //#ifdef dateRepeat
	    adds public void view(int position, TextView tvReminder, LinearLayout reminderRow) {
            TextView tvHour = (TextView) reminderRow.findViewById(R.id.txtHour);
            CheckBox tvDone = (CheckBox) reminderRow.findViewById(R.id.cbDone);
            tvDone.setTag(position);
            tvDone.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    try {
                        Reminder reminder = getItem((Integer) buttonView.getTag());
                        reminder.setDone(isChecked);
                        Controller.instance(getContext()).updateReminder(reminder);
                    } catch (DBException e) {
                        e.printStackTrace();
                    }
                }
            });

            tvReminder.setTextColor(rowColor);
            tvReminder.setText(getItem(position).getText());
            
            tvHour.setTextColor(rowColor);
            tvHour.setText(getDatesHour(position));
            
            tvDone.setChecked(getItem(position).isDone());
        }
        //#endif
        removes getDateFirst(int position);
        removes getDateSecond(int position);
    }
    modifies br.unb.cic.reminders.view.ReminderListFragment {
        removes lvReminderLate;
        removes lvReminderToday;
        removes lvReminderNextDays; 
        removes lvReminderNoDate;
        //#ifdef dateRepeat
        adds private ListView lvMonday, lvTuesday, lvWednesday, lvThursday, lvFriday, lvSaturday, lvSunday;
        //#endif
        removes editIntent(Reminder reminder);
        removes createUI();
        removes updateListView(ReminderFilter filter);
        //#ifdef dateRepeat
        adds private Intent editIntent(Reminder reminder) {
            Intent editIntent = new Intent(getActivity().getApplicationContext(), EditReminderActivity.class);
            editIntent.putExtra("monday", reminder.isMonday());
            editIntent.putExtra("tuesday", reminder.isTuesday());
            editIntent.putExtra("wednesday", reminder.isWednesday());
            editIntent.putExtra("thursday", reminder.isThursday());
            editIntent.putExtra("friday", reminder.isFriday());
            editIntent.putExtra("saturday", reminder.isSaturday());
            editIntent.putExtra("sunday", reminder.isSunday());
            editIntent.putExtra("hour", reminder.getHour());
            return editIntent;
        }
        adds public void createUI() {
            lvMonday = (ListView) view.findViewById(R.id.lvMonday);
            lvTuesday = (ListView) view.findViewById(R.id.lvTuesday);
            lvWednesday = (ListView) view.findViewById(R.id.lvWednesday);
            lvThursday = (ListView) view.findViewById(R.id.lvThursday);
            lvFriday = (ListView) view.findViewById(R.id.lvFriday);
            lvSaturday = (ListView) view.findViewById(R.id.lvSaturday);
            lvSunday = (ListView) view.findViewById(R.id.lvSunday);
            updateListView(null);
            registerForContextMenu(lvMonday);
            registerForContextMenu(lvTuesday);
            registerForContextMenu(lvWednesday);
            registerForContextMenu(lvThursday);
            registerForContextMenu(lvFriday);
            registerForContextMenu(lvSaturday);
            registerForContextMenu(lvSunday);
        }
        adds public void updateListView(ReminderFilter filter) {
            if (filter == null)
                filter = new AllRemindersFilter(getActivity());
            adapter = new ReminderArrayAdapter(getActivity().getApplicationContext(), filter.getReminderList());

            ReminderArrayAdapter adapterMonday, adapterTuesday, adapterWednesday, adapterThursday, adapterFriday, adapterSaturday, adapterSunday;

            Reminder r = new Reminder();
            List<Reminder> remindersModay = new ArrayList<Reminder>();
            List<Reminder> remindersTuesday = new ArrayList<Reminder>();
            List<Reminder> remindersWednesday = new ArrayList<Reminder>();
            List<Reminder> remindersThursday = new ArrayList<Reminder>();
            List<Reminder> remindersFriday = new ArrayList<Reminder>();
            List<Reminder> remindersSaturday = new ArrayList<Reminder>();
            List<Reminder> remindersSunday = new ArrayList<Reminder>();

            for (int i = 0; i < adapter.getCount(); ++i) {
                r = adapter.getItem(i);
                if (r.isMonday())
                    remindersModay.add(r);
                if (r.isTuesday())
                    remindersTuesday.add(r);
                if (r.isWednesday())
                    remindersWednesday.add(r);
                if (r.isThursday())
                    remindersThursday.add(r);
                if (r.isFriday())
                    remindersFriday.add(r);
                if (r.isSaturday())
                    remindersSaturday.add(r);
                if (r.isSunday())
                    remindersSunday.add(r);
            }

            adapterMonday = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersModay,
				Color.rgb(0,0,0), ReminderArrayAdapter.MONDAY);
            adapterTuesday = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersTuesday,
                    Color.rgb(0,0,255), ReminderArrayAdapter.TUESDAY);
            adapterWednesday = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersWednesday,
                    Color.rgb(210,105,30), ReminderArrayAdapter.WEDNESDAY);
            adapterThursday = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersThursday,
                    Color.rgb(0,128,0), ReminderArrayAdapter.THURSDAY);
            adapterFriday = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersFriday,
                    Color.rgb(255,20,147), ReminderArrayAdapter.FRIDAY);
            adapterSaturday = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersSaturday,
                    Color.rgb(255,0,0), ReminderArrayAdapter.SATURDAY);
            adapterSunday = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersSunday,
                    Color.rgb(128,0,128), ReminderArrayAdapter.SUNDAY);

            lvMonday.setAdapter(adapterMonday);
            Utility.setListViewHeightBasedOnChildren(lvMonday);
            lvTuesday.setAdapter(adapterTuesday);
            Utility.setListViewHeightBasedOnChildren(lvTuesday);
            lvWednesday.setAdapter(adapterWednesday);
            Utility.setListViewHeightBasedOnChildren(lvWednesday);
            lvThursday.setAdapter(adapterThursday);
            Utility.setListViewHeightBasedOnChildren(lvThursday);
            lvFriday.setAdapter(adapterFriday);
            Utility.setListViewHeightBasedOnChildren(lvFriday);
            lvSaturday.setAdapter(adapterSaturday);
            Utility.setListViewHeightBasedOnChildren(lvSaturday);
            lvSunday.setAdapter(adapterSunday);
            Utility.setListViewHeightBasedOnChildren(lvSunday);
        }
        //#endif
    }
    adds {
        //#ifdef dateRepeat
		package br.unb.cic.reminders.model;

		public class InvalidDaysException extends InvalidFormatException {

			private static final long serialVersionUID = 7998188562654167391L;

			public InvalidDaysException(Object o) {
				super("These days " + o);
			}

        }
        //#endif
	}
    modifies br.unb.cic.reminders.model.Reminder {
        removes date;
        //#ifdef dateRepeat
        adds @Column(column = "MONDAY", type = DBTypes.INT) private boolean monday;
        adds @Column(column = "TUESDAY", type = DBTypes.INT) private boolean tuesday;
        adds @Column(column = "WEDNESDAY", type = DBTypes.INT) private boolean wednesday;
        adds @Column(column = "THURSDAY", type = DBTypes.INT) private boolean thursday;
        adds @Column(column = "FRIDAY", type = DBTypes.INT) private boolean friday;
        adds @Column(column = "SATURDAY", type = DBTypes.INT) private boolean saturday;
        adds @Column(column = "SUNDAY", type = DBTypes.INT) private boolean sunday;
        //#endif
        removes getDate();
        removes setDate(String date);
        removes isValid();
        //#ifdef dateRepeat
        adds public boolean isValid() {
            return (isOneCbSelected() && text != null && hour != null);
        }
        adds public boolean isOneCbSelected() {
            return (monday != false || tuesday != false || wednesday != false || thursday != false 
                || friday != false || saturday != false);
        }
        adds public boolean isMonday() {
            return monday;
        }
        adds public void setMonday(boolean monday) {
            this.monday = monday;
        }
        adds public void setMonday(int monday) {
            this.monday = (monday == 0 ? false : true);
        }
        adds public int getMonday() {
            return monday ? 1 : 0;
        }
        adds public boolean isTuesday() {
            return tuesday;
        }
        adds public void setTuesday(boolean tuesday) {
            this.tuesday = tuesday;
        }
        adds public void setTuesday(int tuesday) {
            this.tuesday = (tuesday == 0 ? false : true);
        }
        adds public int getTuesday() {
            return tuesday ? 1 : 0;
        }
        adds public boolean isWednesday() {
            return wednesday;
        }
        adds public void setWednesday(boolean wednesday) {
            this.wednesday = wednesday;
        }
        adds public void setWednesday(int wednesday) {
            this.wednesday = (wednesday == 0 ? false : true);
        }
        adds public int getWednesday() {
            return wednesday ? 1 : 0;
        }
        adds public boolean isThursday() {
            return thursday;
        }
        adds public void setThursday(boolean thursday) {
            this.thursday = thursday;
        }
        adds public void setThursday(int thursday) {
            this.thursday = (thursday == 0 ? false : true);
        }
        adds public int getThursday() {
            return thursday ? 1 : 0;
        }
        adds public boolean isFriday() {
            return friday;
        }
        adds public void setFriday(boolean friday) {
            this.friday = friday;
        }
        adds public void setFriday(int friday) {
            this.friday = (friday == 0 ? false : true);
        }
        adds public int getFriday() {
            return friday ? 1 : 0;
        }
        adds public boolean isSaturday() {
            return saturday;
        }
        adds public void setSaturday(boolean saturday) {
            this.saturday = saturday;
        }
        adds public void setSaturday(int saturday) {
            this.saturday = (saturday == 0 ? false : true);
        }
        adds public int getSaturday() {
            return saturday ? 1 : 0;
        }
        adds public boolean isSunday() {
            return sunday;
        }
        adds public void setSunday(boolean sunday) {
            if (!isOneCbSelected() && !sunday) {
                throw new InvalidDaysException("are all false");
            }
            this.sunday = sunday;
        }
        adds public void setSunday(int sunday) {
            this.sunday = (sunday == 0 ? false : true);
        }
        adds public int getSunday() {
            return sunday ? 1 : 0;
        }    
        //#endif
    }
    modifies br.unb.cic.reminders.model.db.DBConstants {
        removes tableStatement();
        //#ifdef dateRepeat
        adds private static String tableStatement() {
            return "MONDAY INTEGER NOT NULL,"
					+ "TUESDAY INTEGER NOT NULL," + "WEDNESDAY INTEGER NOT NULL," + "THURSDAY INTEGER NOT NULL,"
					+ "FRIDAY INTEGER NOT NULL," + "SATURDAY INTEGER NOT NULL," + "SUNDAY INTEGER NOT NULL," + "HOUR CHAR(5) NULL,";
        }
        //#endif
        removes REMINDER_DATE_COLUMN;
        //#ifdef dateRepeat
        adds public static String REMINDER_MONDAY_COLUMN = "MONDAY";
        adds public static String REMINDER_TUESDAY_COLUMN = "TUESDAY";
        adds public static String REMINDER_WEDNESDAY_COLUMN = "WEDNESDAY";
        adds public static String REMINDER_THURSDAY_COLUMN = "THURSDAY";
        adds public static String REMINDER_FRIDAY_COLUMN = "FRIDAY";
        adds public static String REMINDER_SATURDAY_COLUMN = "SATURDAY";
        adds public static String REMINDER_SUNDAY_COLUMN = "SUNDAY";     
        //#endif      
    }
    modifies br.unb.cic.reminders.model.cp.ReminderContentProvider {
        removes date();
        removes createReminderInsert(ContentValues values);
        //#ifdef dateRepeat
        adds private Reminder createReminderInsert(ContentValues values) throws DBException {
            Reminder reminder = new Reminder();
            reminder.setHour(values.getAsString(hour()));
            return reminder;
        }
        //#endif
    }
    modifies br.unb.cic.reminders.view.EditReminderActivity {
        removes initializeValues(Intent intent);
        //#ifdef dateRepeat
        adds private void initializeValues(Intent intent) throws Exception {
            boolean monday = intent.getBooleanExtra("monday", false);
            boolean tuesday = intent.getBooleanExtra("tuesday", false);
            boolean wednesday = intent.getBooleanExtra("wednesday", false);
            boolean thursday = intent.getBooleanExtra("thursday", false);
            boolean friday = intent.getBooleanExtra("friday", false);
            boolean saturday = intent.getBooleanExtra("saturday", false);
            boolean sunday = intent.getBooleanExtra("sunday", false);
            String hour = intent.getStringExtra("hour");

            reminder.setMonday(monday);
            reminder.setTuesday(tuesday);
            reminder.setWednesday(wednesday);
            reminder.setThursday(thursday);
            reminder.setFriday(friday);
            reminder.setSaturday(saturday);
            reminder.setSunday(sunday);

            cbMonday.setChecked(monday);
            cbTuesday.setChecked(tuesday);
            cbWednesday.setChecked(wednesday);
            cbThursday.setChecked(thursday);
            cbFriday.setChecked(friday);
            cbSaturday.setChecked(saturday);
            cbSunday.setChecked(sunday);

            updateSpinnerDateHour(spinnerTime, hour);
            updateTimeFromString(hour);
        }
        //#endif
    }
    modifies br.unb.cic.reminders.view.ExternalAddReminderActivity {
        removes reminderFromIntent(Intent intent);
        //#ifdef dateRepeat
        adds private void reminderFromIntent(Intent intent) throws Exception {
            String hour = intent.getStringExtra("hour");
            int monday = intent.getIntExtra("monday", 0);
			int tuesday = intent.getIntExtra("tuesday", 0);
			int wednesday = intent.getIntExtra("wednesday", 0);
			int thursday = intent.getIntExtra("thursday", 0);
			int friday = intent.getIntExtra("friday", 0);
			int saturday = intent.getIntExtra("saturday", 0);
			int sunday = intent.getIntExtra("sunday", 0);
            reminder.setMonday(monday);
			reminder.setTuesday(tuesday);
			reminder.setWednesday(wednesday);
			reminder.setThursday(thursday);
			reminder.setFriday(friday);
			reminder.setSaturday(saturday);
			reminder.setSunday(sunday);
            reminder.setHour(hour);
        }
        //#endif
        removes initialize();
        //#ifdef dateRepeat
        adds private void initialize() throws Exception {
            updateSpinnerDateHour(spinnerTime, reminder.getHour());
            updateTimeFromString(reminder.getHour());
        }
        //#endif
    }
    modifies br.unb.cic.reminders.view.ReminderActivity {
        //#ifdef dateRepeat
        adds import br.unb.cic.reminders.model.InvalidDaysException;
        //#endif
        removes edtDate;
        removes date;
        removes spinnerDate;
        //#ifdef dateRepeat
        adds protected CheckBox cbMonday, cbTuesday, cbWednesday, cbThursday, cbFriday,
            cbSaturday, cbSunday;
        //#endif
        removes initializeFields();
        removes initializeListeners();
        //#ifdef dateRepeat
        adds private void initializeFields() {
            btnSave = (Button) findViewById(R.id.btnSave);
            btnCancel = (Button) findViewById(R.id.btnCancel);
            edtReminder = (EditText) findViewById(R.id.edtReminder);
            edtDetails = (EditText) findViewById(R.id.edtDetails);
            cbMonday = (CheckBox) findViewById(R.id.cbMonday);
            cbTuesday = (CheckBox) findViewById(R.id.cbTuesday);
            cbWednesday = (CheckBox) findViewById(R.id.cbWednesday);
            cbThursday = (CheckBox) findViewById(R.id.cbThursday);
            cbFriday = (CheckBox) findViewById(R.id.cbFriday);
            cbSaturday = (CheckBox) findViewById(R.id.cbSaturday);
            cbSunday = (CheckBox) findViewById(R.id.cbSunday);
            spinnerTime = getSpinnerTime();

        }   
        adds private void initializeListeners() {
            addListenerToBtnSave();
            addListenerToBtnCancel();
            addListenerToSpinnerTime();
        }
        //#endif
        removes addListenerToSpinnerDate();
        removes setValuesOnReminder();
        //#ifdef dateRepeat
        adds private void setValuesOnReminder() throws Exception {
            reminder.setMonday(cbMonday.isChecked());
			reminder.setTuesday(cbTuesday.isChecked());
			reminder.setWednesday(cbWednesday.isChecked());
			reminder.setThursday(cbThursday.isChecked());
			reminder.setFriday(cbFriday.isChecked());
			reminder.setSaturday(cbSaturday.isChecked());
            try {
			    reminder.setSunday(cbSunday.isChecked());
            } catch (InvalidDaysException e) {
                Toast.makeText(getApplicationContext(), "At least one day should be checked.", Toast.LENGTH_SHORT).show();
            }
            reminder.setHour(timeToString());
        }
        //#endif
        removes dateToString();
        removes updateDateFromString(String sDate);
        removes getSpinnerDate();
    }
}
