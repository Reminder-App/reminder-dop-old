delta dStaticCategoryPriority {
	modifies br.unb.cic.reminders.model.db.DBConstants {
		removes CREATE_TABLE_STATEMENTS;
		adds public static String CREATE_TABLE_STATEMENTS[] = { "CREATE TABLE CATEGORY("
			+ "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "NAME VARCHAR(50) NOT NULL, " + "LOCKED INT NOT NULL);",

			"CREATE TABLE REMINDER ( " + "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "TEXT VARCHAR(50) NOT NULL,"
					+ "DETAILS VARCHAR(50) NULL,"
					+ "FK_CATEGORY INTEGER NOT NULL REFERENCES CATEGORY ON DELETE CASCADE," + "DATE CHAR(10) NULL,"
					+ "HOUR CHAR(5) NULL," + "PRIORITY INTEGER NOT NULL," + "DONE INTEGER NOT NULL);", };
		removes SELECT_REMINDERS;
		adds public static final String SELECT_REMINDERS = "SELECT PK, TEXT, DETAILS, FK_CATEGORY, DATE, HOUR, PRIORITY, DONE FROM REMINDER";
		removes SELECT_REMINDERS_BY_CATEGORY;
		adds public static final String SELECT_REMINDERS_BY_CATEGORY = "SELECT PK, TEXT, DETAILS, FK_CATEGORY, DATE, HOUR, PRIORITY, DONE FROM REMINDER " 
			+ "WHERE FK_CATEGORY = ?";
	}
	modifies br.unb.cic.reminders.model.cp.ReminderContentProvider {
		removes insert(Uri uri, ContentValues values);
		adds @Override public Uri insert(Uri uri, ContentValues values) {
			try {
				Reminder reminder = new Reminder();

				Category category = cdao.findCategory(values.getAsString(category()));
				reminder.setCategory(category);
				reminder.setText(values.getAsString(text()));
				reminder.setDate(values.getAsString(date()));
				reminder.setHour(values.getAsString(hour()));

				Long id = rdao.saveReminder(reminder);
				getContext().getContentResolver().notifyChange(uri, null);
				return Uri.parse(BASE_PATH + "/" + id);
			} catch (DBException e) {
				throw new RuntimeException(e.getLocalizedMessage());
			}

		}
	}
	modifies br.unb.cic.reminders.view.ExternalAddReminderActivity {
		removes setReminderFromIntent();
		adds private void setReminderFromIntent() throws Exception {
			Intent intent = getIntent();
			String action = intent.getAction();
			String type = intent.getType();
	
			// Gets the information from the intent if it is an edit call
			if (action.equals("br.com.positivo.reminders.ADD_REMINDER") && "text/plain".equals(type)) {
				String text = intent.getStringExtra("text");
				String details = intent.getStringExtra("details");
				String categoryName = intent.getStringExtra("category_name");
				String date = intent.getStringExtra("date");
				String hour = intent.getStringExtra("hour");
				String priority = intent.getStringExtra("priority");
	
				List<Category> categories = Controller.instance(getApplicationContext()).listCategories();
				for (Category c : categories) {
					if (c.getName().equals(categoryName)) {
						newCategory = c;
						break;
					}
				}
				reminder.setText(text);
				reminder.setDetails(details);
				reminder.setDate(date);
				reminder.setHour(hour);
				reminder.setPriority(Priority.fromCode(Integer.parseInt(priority)));
				reminder.setCategory(newCategory);
			} else
				reminder = null;
	
		}
		removes initializeValues();
		adds @Override protected void initializeValues() {
	
			if (!reminder.isValid())
				return;
	
			edtReminder.setText(reminder.getText());
			edtDetails.setText(reminder.getDetails());
			updateSpinnerDateHour(spinnerDate, reminder.getDate());
			updateDateFromString(reminder.getDate());
			updateSpinnerDateHour(spinnerTime, reminder.getHour());
			updateTimeFromString(reminder.getHour());
			spinnerPriority.setSelection(reminder.getPriority());
			try {
				spinnerCategory.setSelection(categoryToIndex(reminder.getCategory()));
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	
		}
	}
	modifies br.unb.cic.reminders.model.db.DefaultReminderDAO {
		removes cursorToReminder(Cursor cursor);
		adds private Reminder cursorToReminder(Cursor cursor) throws DBException {
			Long pk = cursor.getLong(cursor.getColumnIndex(DBConstants.REMINDER_PK_COLUMN));
			String text = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_TEXT_COLUMN));
			String details = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_DETAILS_COLUMN));
			String date = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_DATE_COLUMN));
			String hour = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_HOUR_COLUMN));
			int priority = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_PRIORITY_COLUMN));
			int done = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_DONE_COLUMN));
			Long categoryId = cursor.getLong(cursor.getColumnIndex(DBConstants.REMINDER_FK_CATEGORY_COLUMN));
	
			Category category = DBFactory.factory(context).createCategoryDAO().findCategoryById(categoryId);
	
			Reminder reminder = new Reminder();
	
			reminder.setText(text);
			reminder.setDetails(details);
			reminder.setId(pk);
			reminder.setDate(date);
			reminder.setHour(hour);
			reminder.setPriority(Priority.fromCode(priority));
			reminder.setDone(done);
			reminder.setCategory(category);
	
			return reminder;
		}
	}
	modifies br.unb.cic.reminders.model.Reminder {
		removes isValid();
		adds public boolean isValid() {
			return (text != null && category != null && date != null && hour != null && priority != null);
		}
	}
}