delta dManageReminder {
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders;

		import android.app.Activity;
		import android.app.FragmentTransaction;
		import android.content.Intent;
		import android.os.Bundle;
		import android.view.Menu;
		import android.view.MenuInflater;
		import android.view.MenuItem;
		import br.unb.cic.reminders.view.AddReminderActivity;
		import br.unb.cic.reminders.view.ReminderListFragment;
		import br.unb.cic.reminders2.R;

		public class ReminderMainActivity extends Activity {

			private static String TAG = "Reminder";
			private FragmentTransaction ft;
			private ReminderListFragment listReminderFragment;

			
			@Override
			protected void onCreate(Bundle savedInstanceState) {
				super.onCreate(savedInstanceState);
				setContentView(R.layout.reminders_main_activity);
				createUI();
			}

			private void createUI() {
				ft = getFragmentManager().beginTransaction();
				listReminderFragment = new ReminderListFragment();
				ft.add(R.id.listReminders, listReminderFragment);
				ft.commit();
			}

			@Override
			public boolean onCreateOptionsMenu(Menu menu) {
				MenuInflater inflater = getMenuInflater();
				inflater.inflate(R.menu.action_bar_menu, menu);
				return true;
			}

			@Override
			public boolean onOptionsItemSelected(MenuItem item) {
				switch (item.getItemId()) {
				case R.id.menu_addReminder:
					Intent reminderIntent = new Intent(getApplicationContext(), AddReminderActivity.class);
					startActivity(reminderIntent);
					return true;
				default:
					return super.onOptionsItemSelected(item);
				}
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package util;

		import java.text.ParseException;
		import java.text.SimpleDateFormat;
		import java.util.Date;
		import java.util.Locale;

		public class DateFormat {
			public static Date dateFormater(String dateUnformated) throws ParseException {
				SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm", Locale.getDefault());
				return sdf.parse(dateUnformated);
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package util;

		import android.text.Editable;
		import android.text.TextWatcher;
		import android.widget.EditText;

		public abstract class Mask {

			public static String unmask(String str) {
				return str.replaceAll("[:]", "").replaceAll("[.]", "").replaceAll("[-]", "").replaceAll("[/]", "")
						.replaceAll("[(]", "").replaceAll("[)]", "");
			}

			
			public static TextWatcher insert(final String mask, final EditText ediTxt) {
				return new TextWatcher() {
					boolean isUpdating;
					String old = "";

					public void onTextChanged(CharSequence s, int start, int before, int count) {
						String str = Mask.unmask(s.toString());
						String txt = "";
						if (isUpdating) {
							old = str;
							isUpdating = false;
							return;
						}
						int i = 0;
						boolean done = false;
						for (char m : mask.toCharArray()) {
							if (!done && m != '#' && str.length() > old.length()) {
								txt += m;
							} else if (!done && i < str.length()) {
								txt += str.charAt(i);
								i++;
							} else {
								done = true;
							}
						}
						isUpdating = true;
						ediTxt.setText(txt);
						ediTxt.setSelection(txt.length());
					}

					public void beforeTextChanged(CharSequence s, int start, int count, int after) {
					}

					public void afterTextChanged(Editable s) {
					}
				};
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package util;

		public class Patterns {

			public static final String TEXT_PATTERN = "[^.!?\\s][^.!?]*(?:[.!?](?![']?\\s|$)[^.!?]*)*[.!?]?[']?(?=\\s|$)";

			public static final String DATE_PATTERN = "(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\\d\\d";

			public static final String HOUR_PATTERN = "([01]?[0-9]|2[0-3]):[0-5][0-9]";
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package util;

		import android.view.View;
		import android.view.ViewGroup;
		import android.widget.ListAdapter;
		import android.widget.ListView;


		public class Utility {

			public static void setListViewHeightBasedOnChildren(ListView listView) {
				ListAdapter listAdapter = listView.getAdapter();
				if (listAdapter == null) {
					return;
				}

				int totalHeight = 0;
				for (int i = 0; i < listAdapter.getCount(); i++) {
					View listItem = listAdapter.getView(i, null, listView);
					listItem.measure(0, 0);
					totalHeight += listItem.getMeasuredHeight();
				}

				ViewGroup.LayoutParams params = listView.getLayoutParams();
				params.height = totalHeight + (listView.getDividerHeight()*(listAdapter.getCount() - 1));
				listView.setLayoutParams(params);
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.framework.persistence.annotations;

		import java.lang.annotation.ElementType;
		import java.lang.annotation.Retention;
		import java.lang.annotation.RetentionPolicy;
		import java.lang.annotation.Target;

		import br.unb.cic.framework.persistence.DBTypes;

		@Retention(RetentionPolicy.RUNTIME)
		@Target(ElementType.FIELD)
		public @interface Column {
			String column();

			boolean primaryKey() default false;

			DBTypes type();
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.framework.persistence.annotations;

		import java.lang.annotation.ElementType;
		import java.lang.annotation.Retention;
		import java.lang.annotation.RetentionPolicy;
		import java.lang.annotation.Target;

		@Retention(RetentionPolicy.RUNTIME)
		@Target(ElementType.TYPE)
		public @interface Entity {
			String table();
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.framework.persistence.annotations;

		import java.lang.annotation.ElementType;
		import java.lang.annotation.Retention;
		import java.lang.annotation.RetentionPolicy;
		import java.lang.annotation.Target;

		@Retention(RetentionPolicy.RUNTIME)
		@Target(ElementType.FIELD)
		public @interface ForeignKey {
			String mappedBy();
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.framework.persistence;

		public class DBException extends Exception {

			private static final long serialVersionUID = 1L;

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.framework.persistence;

		public class DBInvalidEntityException extends Exception {

			private static final long serialVersionUID = 1L;

			public DBInvalidEntityException(Object e) {
				super(e.getClass().getCanonicalName() + "is not a valid entity according to the persistence framework.");
			}
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.framework.persistence;

		public enum DBTypes {
			INT, LONG, TEXT;
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.framework.persistence;

		import java.lang.reflect.Field;
		import java.lang.reflect.Method;
		import java.util.ArrayList;
		import java.util.List;

		import android.content.ContentValues;
		import android.content.Context;
		import android.database.Cursor;
		import android.database.sqlite.SQLiteDatabase;
		import android.util.Log;
		import br.unb.cic.framework.persistence.annotations.Column;
		import br.unb.cic.framework.persistence.annotations.Entity;
		import br.unb.cic.framework.persistence.annotations.ForeignKey;
		import br.unb.cic.reminders.model.db.DBHelper;

		public class GenericDAO<T> {

			protected Context context;
			protected SQLiteDatabase db;
			protected DBHelper dbHelper;

			private static final String DATABASE_NAME = "ReminderDB";
			private static final int DATABASE_VERSION = 7;

			public GenericDAO(Context c) {
				context = c;
				dbHelper = new DBHelper(context, DATABASE_NAME, null, DATABASE_VERSION);
			}

			protected Long persist(T entity) throws DBInvalidEntityException, DBException {
				try {
					db = dbHelper.getWritableDatabase();

					ContentValues values = new ContentValues();

					if (!entity.getClass().isAnnotationPresent(Entity.class)) {
						throw new DBInvalidEntityException(entity);
					}

					String tableName = entity.getClass().getAnnotation(Entity.class).table();

					boolean update = false;
					String updateWhereClause = null;

					for (Field f : entity.getClass().getDeclaredFields()) {
						if (f.isAnnotationPresent(Column.class)) {
							String column = f.getAnnotation(Column.class).column();
							boolean pk = f.getAnnotation(Column.class).primaryKey();

							String methodName = getMethod(f.getName());
							Class args[] = {};
							Method m = entity.getClass().getDeclaredMethod(methodName, args);

							Object value = m.invoke(entity, args);

							if (f.isAnnotationPresent(ForeignKey.class)) {
								String fk = f.getAnnotation(ForeignKey.class).mappedBy();
								methodName = getMethod(fk);

								m = value.getClass().getDeclaredMethod(methodName, args);

								value = m.invoke(value, args);
							}
							if (value != null) {
								values.put(column, value.toString());
							} else {
								values.putNull(column);
							}
							if (pk && value != null) {
								update = true;
								updateWhereClause = column + " = " + value.toString();
							}
						}
					}
					Long id = null;
					db.beginTransaction();
					if (!update) {
						id = db.insert(tableName, null, values);
					} else {
						db.update(tableName, values, updateWhereClause, null);
					}
					db.setTransactionSuccessful();
					return id;
				} catch (Exception e) {
					e.printStackTrace();
					throw new DBException();
				} finally {
					if (db.inTransaction()) {
						db.endTransaction();
					}
					db.close();
					dbHelper.close();
				}
			}

			public T cursorToEntity(Cursor cursor, Class<T> clasz) throws DBInvalidEntityException, Exception {
				if (!clasz.isAnnotationPresent(Entity.class)) {
					throw new DBInvalidEntityException(clasz);
				}

				T entity = clasz.newInstance();

				for (Field f : declaredFields(clasz)) {
					Class args[] = { f.getType() };

					if (!f.isAnnotationPresent(ForeignKey.class)) {
						Method m = entity.getClass().getDeclaredMethod(setMethod(f.getName()), args);

						m.invoke(entity, fieldValueFromCursor(cursor, f));
					} else {

					}
				}

				return entity;
			}

			private Object fieldValueFromCursor(Cursor cursor, Field f) {
				String column = f.getAnnotation(Column.class).column();
				DBTypes type = f.getAnnotation(Column.class).type();

				switch (type) {
				case INT:
					return cursor.getInt(cursor.getColumnIndex(column));
				case LONG:
					return cursor.getLong(cursor.getColumnIndex(column));
				case TEXT:
					return cursor.getString(cursor.getColumnIndex(column));
				default:
					return null;
				}
			}

			private List<Field> declaredFields(Class<T> clasz) {
				List<Field> fields = new ArrayList<Field>();
				for (Field f : clasz.getDeclaredFields()) {
					if (f.isAnnotationPresent(Column.class)) {
						fields.add(f);
					}
				}
				return fields;
			}

			private String setMethod(String field) {
				return "set" + field.substring(0, 1).toUpperCase() + field.substring(1);
			}

			private String getMethod(String field) {
				return "get" + field.substring(0, 1).toUpperCase() + field.substring(1);
			}
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.model;

		public class InvalidTextException extends InvalidFormatException {

			private static final long serialVersionUID = 7998188562654167391L;

			public InvalidTextException(Object o) {
				super("This text " + o);
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.model;

		public class InvalidFormatException extends RuntimeException {

			private static final long serialVersionUID = 2850584940310533216L;

			public InvalidFormatException(Object o) {
				super(o + " is in the wrong format");
			}
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.model;

		public class InvalidDateException extends InvalidFormatException {

			private static final long serialVersionUID = 7194191177254259925L;

			public InvalidDateException(Object o) {
				super("This date " + o);
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.model.db;

		import android.content.Context;
		import android.database.sqlite.SQLiteDatabase;
		import android.database.sqlite.SQLiteDatabase.CursorFactory;
		import android.database.sqlite.SQLiteException;
		import android.database.sqlite.SQLiteOpenHelper;
		import android.util.Log;

		public class DBHelper extends SQLiteOpenHelper {

			public DBHelper(Context context, String name, CursorFactory factory, int version) {
				super(context, name, factory, version);
			}

			@Override
			public void onOpen(SQLiteDatabase db) {
				db.execSQL("PRAGMA foreign_keys=ON;");
				super.onOpen(db);
			}

			@Override
			public void onCreate(SQLiteDatabase db) {
				try {
					for (String sql : DBConstants.CREATE_TABLE_STATEMENTS) {
						Log.i(DBHelper.class.getCanonicalName(), sql);
						db.execSQL(sql);
					}
				} catch (SQLiteException e) {
					Log.v(DBHelper.class.getName(), e.getMessage());
				}
			}

			@Override
			public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
				try {
					for (String sql : DBConstants.DROP_TABLE_STATEMENTS) {
						db.execSQL(sql);
					}
					onCreate(db);
				} catch (SQLiteException e) {
					Log.v(DBHelper.class.getName(), e.getMessage());
				}
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.model.db;

		import java.util.List;

		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.model.Reminder;

		public interface ReminderDAO {

			public Long saveReminder(Reminder r) throws DBException;

			public List<Reminder> listReminders() throws DBException;

			public void updateReminder(Reminder reminder) throws DBException;

			public void deleteReminder(Reminder reminder) throws DBException;

			public void persistReminder(Reminder reminder) throws DBException;
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.model.db;

		import java.util.ArrayList;
		import java.util.List;

		import android.content.Context;
		import android.database.Cursor;
		import android.database.sqlite.SQLiteException;
		import android.util.Log;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.framework.persistence.DBInvalidEntityException;
		import br.unb.cic.framework.persistence.GenericDAO;
		import br.unb.cic.reminders.model.Reminder;

		public class DefaultReminderDAO extends GenericDAO<Reminder> implements ReminderDAO {

			public DefaultReminderDAO(Context c) {
				super(c);
			}

			public Long saveReminder(Reminder r) throws DBException {
				try {
					return persist(r);
				} catch (DBInvalidEntityException e) {
					throw new DBException();
				}
			}

			public List<Reminder> listReminders() throws DBException {
				try {
					db = dbHelper.getReadableDatabase();
					Cursor cursor = db.rawQuery(DBConstants.SELECT_REMINDERS, null);

					return remindersFromCursor(cursor);
				} catch (Exception e) {
					throw new DBException();
				} finally {
					db.close();
					dbHelper.close();
				}
			}

			public void updateReminder(Reminder reminder) throws DBException {
				try {
					persist(reminder);
				} catch (DBInvalidEntityException e) {
					throw new DBException();
				} finally {
					db.close();
					dbHelper.close();
				}
			}

			public void deleteReminder(Reminder reminder) throws DBException {
				try {
					db = dbHelper.getWritableDatabase();
					db.delete(DBConstants.REMINDER_TABLE, DBConstants.REMINDER_PK_COLUMN + "=" + reminder.getId(), null);
				} catch (SQLiteException e) {
					throw new DBException();
				} finally {
					db.close();
					dbHelper.close();
				}
			}

			public void persistReminder(Reminder reminder) throws DBException {
				try {
					persist(reminder);
				} catch (DBInvalidEntityException e) {
					throw new DBException();
				} finally {
					db.close();
					dbHelper.close();
				}
			}

			private Reminder cursorToReminder(Cursor cursor) throws DBException {
				Long pk = cursor.getLong(cursor.getColumnIndex(DBConstants.REMINDER_PK_COLUMN));
				String text = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_TEXT_COLUMN));
				String details = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_DETAILS_COLUMN));
				int done = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_DONE_COLUMN));

				Reminder reminder = createReminderCursor(cursor);

				reminder.setText(text);
				reminder.setDetails(details);
				reminder.setId(pk);
				reminder.setDone(done);
				return reminder;
			}

			private Reminder createReminderCursor(Cursor cursor) throws DBException {
				Reminder reminder = new Reminder();
				String date = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_DATE_COLUMN));
				String hour = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_HOUR_COLUMN));
				reminder.setDate(date);
				reminder.setHour(hour);
				return reminder;
			}

			private List<Reminder> remindersFromCursor(Cursor cursor) throws DBException {
				List<Reminder> reminders = new ArrayList<Reminder>();

				if (cursor.moveToFirst()) {
					do {
						Reminder reminder = cursorToReminder(cursor);
						reminders.add(reminder);
					} while (cursor.moveToNext());
				}
				cursor.close();
				return reminders;
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import java.util.Calendar;

		import android.app.DatePickerDialog;
		import android.app.Dialog;
		import android.app.DialogFragment;
		import android.content.DialogInterface;
		import android.os.Bundle;
		import android.widget.ArrayAdapter;
		import android.widget.DatePicker;
		import android.widget.Spinner;

		class DatePickerDialogFragment extends DialogFragment implements DatePickerDialog.OnDateSetListener {

			private Calendar date;
			private Spinner spinnerDate;

			private int pYear;
			private int pDay;
			private int pMonth;

			public DatePickerDialogFragment(Calendar date, Spinner spinnerDate) {
				this.date = date;
				this.spinnerDate = spinnerDate;
			}

			@Override
			public Dialog onCreateDialog(Bundle savedInstanceState) {
				int year = date.get(Calendar.YEAR);
				int month = date.get(Calendar.MONTH);
				int day = date.get(Calendar.DAY_OF_MONTH);

				return new DatePickerDialog(getActivity(), this, year, month, day);
			}

			@SuppressWarnings("unchecked")
			@Override
			public void onDismiss(DialogInterface dialog) {
				date.set(pYear, pMonth, pDay);
				String sDate = Integer.toString(pDay) + "-" + Integer.toString(pMonth + 1) + "-" + Integer.toString(pYear);

				ArrayAdapter<String> adapter = (ArrayAdapter<String>) spinnerDate.getAdapter();

				adapter.add(sDate);
				spinnerDate.setSelection(2);

				super.onDismiss(dialog);
			}

			public void onDateSet(DatePicker view, int year, int month, int day) {
				pYear = year;
				pDay = day;
				pMonth = month;
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import br.unb.cic.reminders.controller.ReminderFilter;

		public interface FiltersListChangeListener {

			public void onSelectedFilterChanged(ReminderFilter filter);

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import br.unb.cic.reminders.model.InvalidFormatException;

		public class InvalidHourException extends InvalidFormatException {

			private static final long serialVersionUID = 8341230773647025695L;

			public InvalidHourException(Object o) {
				super("This hour " + o);
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import java.util.Arrays;
		import java.util.List;

		import util.Mask;
		import android.app.Activity;
		import android.content.Intent;
		import android.os.Bundle;
		import android.util.Log;
		import android.view.View;
		import android.widget.AdapterView;
		import android.widget.AdapterView.OnItemSelectedListener;
		import android.widget.ArrayAdapter;
		import android.widget.Button;
		import android.widget.EditText;
		import android.widget.Spinner;
		import android.widget.Toast;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.model.InvalidDateException;
		import br.unb.cic.reminders.model.InvalidFormatException;
		import br.unb.cic.reminders.model.InvalidTextException;
		import br.unb.cic.reminders.model.Reminder;
		import br.unb.cic.reminders2.R;


		public class ReminderAddActivity extends Activity {

			private EditText edtReminder, edtDetails, edtDate, edtHour; 

			private Button btnSave, btnCancel;

			private boolean editingReminder;
			private Long previewReminderId;

			@Override
			public void onCreate(Bundle savedInstanceState) {
				super.onCreate(savedInstanceState);
				setContentView(R.layout.reminder_add);

				Reminder existingReminder = getReminderFromIntent();

				if (existingReminder == null) {
					editingReminder = true;
					Reminder editReminder = getExistingReminder();
					initialize(editReminder);
				} else {
					editingReminder = false;
					initialize(existingReminder);
				}

				configureActionListener();

			}

			private void configureActionListener() {
				addListenerToBtnSave();
				addListenerToBtnCancel();
			}

			private void addListenerToBtnSave() {
				btnSave.setOnClickListener(new Button.OnClickListener() {
					public void onClick(View v) {
						try {
							Reminder reminder = createReminder();
							if (editingReminder) {
								reminder.setId(previewReminderId);
								Controller.instance(getApplicationContext()).updateReminder(reminder);
							} else {
								Controller.instance(getApplicationContext()).addReminder(reminder);
							}
							finish();
						} catch (Exception e) {
							Log.e("ReminderAddActivity", e.getMessage());
							e.printStackTrace();
						}
					}

				});
			}

			private void addListenerToBtnCancel() {
				btnCancel.setOnClickListener(new Button.OnClickListener() {
					public void onClick(View v) {
						finish();
					}
				});
			}

			private Reminder createReminder() {
				
				Reminder reminder = new Reminder();
				try {
					reminder = createReminderAux();
					reminder.setText(edtReminder.getText().toString());
					reminder.setDetails(edtDetails.getText().toString());
				} catch (InvalidTextException e) {
					Toast.makeText(getApplicationContext(), "Invalid text.", Toast.LENGTH_SHORT).show();
				} catch (InvalidDateException e) {
					Toast.makeText(getApplicationContext(), "Invalid date.", Toast.LENGTH_SHORT).show();
				} catch (InvalidHourException e) {
					Toast.makeText(getApplicationContext(), "Invalid time.", Toast.LENGTH_SHORT).show();
				}
				return reminder;
			}

			private Reminder createReminderAux() {
				Reminder reminder = new Reminder();
				reminder.setDate(edtDate.getText().toString());
				reminder.setHour(edtHour.getText().toString());
				return reminder;
			}

			private Reminder getExistingReminder() {
				Reminder reminder = null;

				Intent intent = getIntent();
				String action = intent.getAction();
				String type = intent.getType();

				if (Intent.ACTION_SEND.equals(action) && "text/plain".equals(type)) {
					previewReminderId = intent.getLongExtra("id", 0);
					String text = intent.getStringExtra("text");

					reminder = createReminderExisting(intent);
					reminder.setText(text);
					reminder.setId(previewReminderId);
				}

				return reminder;
			}

			private Reminder createReminderExisting(Intent intent) {
				Reminder reminder = new Reminder();
				String date = intent.getStringExtra("date");
				String hour = intent.getStringExtra("hour");
				reminder.setDate(date);
				reminder.setHour(hour);
				return reminder;
			}

			private Reminder getReminderFromIntent() {
				Intent intent = getIntent();
				String action = intent.getAction();
				String type = intent.getType();

				if ("br.com.positivo.reminders.ADD_REMINDER".equals(action) && "text/plain".equals(type)) {
					try {
						String text = intent.getStringExtra("text");
						String details = intent.getStringExtra("details");

						Reminder reminder = createReminderIntent(intent);
						reminder.setText(text);
						reminder.setDetails(details);
						return reminder;
					} catch (InvalidFormatException e) {
					}
				}
				return null;
			}

			private Reminder createReminderIntent(Intent intent) {
				Reminder reminder = new Reminder();
				String date = intent.getStringExtra("date");
				String hour = intent.getStringExtra("hour");
				reminder.setDate(date);
				reminder.setHour(hour);
				return reminder;
			}

			private void initialize(Reminder reminder) {
				try {
					edtReminder = (EditText) findViewById(R.id.edtReminder);

					edtDetails = (EditText) findViewById(R.id.edtDetails);

					if (reminder != null) {
						updateFieldsFromReminder(reminder);
					}

					btnSave = (Button) findViewById(R.id.btnSave);
					btnCancel = (Button) findViewById(R.id.btnCancel);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			private void updateFieldsFromReminder(Reminder reminder) throws Exception {
				edtReminder.setText(reminder.getText());
				edtDetails.setText(reminder.getDetails());
				edtDate.setText(reminder.getDate());
				edtHour.setText(reminder.getHour());
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import java.util.Calendar;
		import java.util.GregorianCalendar;
		import java.util.List;

		import android.content.Context;
		import android.graphics.Color;
		import android.graphics.Typeface;
		import android.view.LayoutInflater;
		import android.view.View;
		import android.view.ViewGroup;
		import android.widget.ArrayAdapter;
		import android.widget.CheckBox;
		import android.widget.CompoundButton;
		import android.widget.ImageView;
		import android.widget.LinearLayout;
		import android.widget.TextView;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.model.Reminder;
		import br.unb.cic.reminders2.R;

		public class ReminderArrayAdapter extends ArrayAdapter<Reminder> {

			private Context context;

			private int rowColor = Color.BLACK;
			private int rowType = NEXT_DAYS;

			public static final int LATE = 0;
			public static final int TODAY = 1;
			public static final int NEXT_DAYS = 2;
			public static final int NO_DATE = 3;

			public ReminderArrayAdapter(Context context, List<Reminder> objects) {
				super(context, R.layout.reminder_row, objects);
				this.context = context;

				this.rowColor = Color.BLACK;
				this.rowType = NEXT_DAYS;
			}

			public ReminderArrayAdapter(Context context, List<Reminder> objects, int rowColor, int rowType) {
				super(context, R.layout.reminder_row, objects);
				this.context = context;

				this.rowColor = rowColor;
				this.rowType = rowType;
			}

			@Override
			public View getView(int position, View convertView, ViewGroup parent) {
				LinearLayout reminderRow;

				if (convertView == null) {
					reminderRow = new LinearLayout(getContext());
					String inflater = Context.LAYOUT_INFLATER_SERVICE;
					LayoutInflater vi;
					vi = (LayoutInflater) getContext().getSystemService(inflater);
					vi.inflate(R.layout.reminder_row, reminderRow, true);
				} else {
					reminderRow = (LinearLayout) convertView;
				}
				TextView tvReminder = (TextView) reminderRow.findViewById(R.id.txtReminder);
				view(position, tvReminder, reminderRow);

				return reminderRow;
			}

			public void view(int position, TextView tvReminder, LinearLayout reminderRow){
				TextView tvDateFirst = (TextView) reminderRow.findViewById(R.id.txtDateFirst);
				TextView tvDateSecond = (TextView) reminderRow.findViewById(R.id.txtDateSecond);
				CheckBox tvDone = (CheckBox) reminderRow.findViewById(R.id.cbDone);
				tvDone.setTag(position);
				tvDone.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
					public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
						try {
							Reminder reminder = getItem((Integer) buttonView.getTag());
							reminder.setDone(isChecked);
							Controller.instance(getContext()).updateReminder(reminder);
						} catch (DBException e) {
							e.printStackTrace();
						}
					}
				});

				tvReminder.setTextColor(rowColor);
				tvReminder.setText(getItem(position).getText());

				tvDateFirst.setTextColor(rowColor);
				tvDateFirst.setText(getDateFirst(position));
				tvDateSecond.setTextColor(rowColor);
				tvDateSecond.setText(getDateSecond(position));

				tvDone.setChecked(getItem(position).isDone());
			}

			private String getDateFirst(int position) {

				if (getItem(position).getDate() == null) {
					return "";
				}

				String months[] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
				String week[] = { "", "SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT" };

				Calendar today = Calendar.getInstance();
				GregorianCalendar thatDay = new GregorianCalendar();
				thatDay.set(Integer.parseInt(getItem(position).getDate().substring(6, 10)),
						Integer.parseInt(getItem(position).getDate().substring(3, 5)) - 1, 
						Integer.parseInt(getItem(position).getDate().substring(0, 2)));

				switch (rowType) {
				case LATE:
					long diff = today.getTimeInMillis() - thatDay.getTimeInMillis();
					long days = diff / (24*60*60*1000);
					if (days == 1)
						return "Yesterday";
					else
						return days + " days ago";

				case TODAY:
					return getDatesHour(position);

				case NEXT_DAYS:
					diff = thatDay.getTimeInMillis() - today.getTimeInMillis();
					days = diff / (24*60*60*1000);

					if (days == 1) {
						return getDatesHour(position);
					} else if (days < 6) {
						return week[thatDay.get(Calendar.DAY_OF_WEEK)];
					} else {
						return thatDay.get(Calendar.DAY_OF_MONTH) + " " + months[thatDay.get(Calendar.MONTH)];
					}


				default:
					break;
				}

				return getItem(position).getDate();

			}

			private String getDateSecond(int position) {

				switch (rowType) {
				case LATE:
					return getDatesHour(position);
				case TODAY:
					return "today";
				case NEXT_DAYS:
					Calendar today = Calendar.getInstance();
					GregorianCalendar thatDay = new GregorianCalendar();
					thatDay.set(Integer.parseInt(getItem(position).getDate().substring(6, 10)), 
							Integer.parseInt(getItem(position).getDate().substring(3, 5)) - 1,
							Integer.parseInt(getItem(position).getDate().substring(0, 2)));

					long diff = thatDay.getTimeInMillis() - today.getTimeInMillis();
					long days = diff / (24*60*60*1000);

					if (days == 1)
						return "tomorrow";
					else
						return getDatesHour(position);
				default:
					break;
				}

				return getItem(position).getHour();
			}

			private String getDatesHour(int position) {

				if (getItem(position).getHour() == null) {
					return "";
				}

				if (getItem(position).getHour().substring(3, 5) != "00")
					return getItem(position).getHour().substring(0, 2) + "h" + getItem(position).getHour().substring(3, 5);
				else
					return getItem(position).getHour().substring(0, 2) + "h";
			}

			public int getRowColor() {
				return rowColor;
			}
			public void setRowColor(int rowColor) {
				this.rowColor = rowColor;
			}

			public int getRowType() {
				return rowType;
			}

			public void setRowType(int rowType) {
				this.rowType = rowType;
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import java.util.List;

		import android.content.Context;
		import android.view.LayoutInflater;
		import android.view.View;
		import android.view.ViewGroup;
		import android.widget.ArrayAdapter;
		import android.widget.LinearLayout;
		import android.widget.TextView;
		import br.unb.cic.reminders.controller.ReminderFilter;
		import br.unb.cic.reminders2.R;

		public class ReminderFilterArrayAdapter extends ArrayAdapter<ReminderFilter> {


			public ReminderFilterArrayAdapter(Context context, List<ReminderFilter> objects) {
				super(context, R.layout.reminder_row, objects);
			}

			@Override
			public View getView(int position, View convertView, ViewGroup parent) {
				LinearLayout filterRow;

				if (convertView == null) {
					filterRow = new LinearLayout(getContext());
					String inflater = Context.LAYOUT_INFLATER_SERVICE;
					LayoutInflater vi;
					vi = (LayoutInflater) getContext().getSystemService(inflater);
					vi.inflate(R.layout.reminder_row, filterRow, true);
				} else {
					filterRow = (LinearLayout) convertView;
				}

				TextView tvReminder = (TextView) filterRow.findViewById(R.id.txtReminder);
				tvReminder.setText(getItem(position).getName());

				return filterRow;
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import java.util.ArrayList;
		import java.util.Calendar;
		import java.util.GregorianCalendar;
		import java.util.List;

		import util.Utility;
		import android.app.Fragment;
		import android.content.Intent;
		import android.graphics.Color;
		import android.os.Bundle;
		import android.util.Log;
		import android.view.ContextMenu;
		import android.view.ContextMenu.ContextMenuInfo;
		import android.view.MenuInflater;
		import android.view.MenuItem;
		import android.view.View;
		import android.view.ViewGroup;
		import android.widget.AdapterView;
		import android.widget.ListView;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.controller.AllRemindersFilter;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.controller.ReminderFilter;
		import br.unb.cic.reminders.model.Reminder;
		import br.unb.cic.reminders2.R;

		public class ReminderListFragment extends Fragment implements FiltersListChangeListener {

			private static String TAG = "reminder fragment list";

			private ListView lvReminderLate, lvReminderToday, lvReminderNextDays, lvReminderNoDate;
			private ReminderArrayAdapter adapter;

			private ReminderArrayAdapter contextMenuAdapter;

			private View view;

			@Override
			public View onCreateView(android.view.LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
				super.onCreate(savedInstanceState);
				Log.i(TAG, "onCreate");
				view = inflater.inflate(R.layout.reminders_list_fragment, container, false);
				createUI();
				return view;
			}

			@Override
			public void onResume() {
				super.onResume();
				updateListView(null);
			}

			public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
				super.onCreateContextMenu(menu, v, menuInfo);

				ListView view = (ListView) v;
				contextMenuAdapter = (ReminderArrayAdapter) view.getAdapter();

				menu.setHeaderTitle(R.string.context_menu_reminder_title);

				MenuInflater inflater = getActivity().getMenuInflater();
				inflater.inflate(R.menu.reminder_list_fragment_context_menu, menu);
			}

			@Override
			public boolean onContextItemSelected(MenuItem item) {
				if (item.getGroupId() == R.id.context_menu_reminder) { 
					AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
					Reminder reminder = (Reminder) contextMenuAdapter.getItem(info.position);

					switch (item.getItemId()) {
					case R.id.edit:
						Intent editIntent = editIntent(reminder);
						editIntent.putExtra("id", reminder.getId());
						editIntent.putExtra("text", reminder.getText());
						editIntent.putExtra("details", reminder.getDetails());
						startActivity(editIntent);
						updateListView(null);
						return true;
					case R.id.delete:
						try {
							Controller.instance(getActivity().getApplicationContext()).deleteReminder(reminder);
						} catch (DBException e) {
							Log.e(TAG, e.getMessage());
						}
						updateListView(null);
						return true;
					default:
						return super.onContextItemSelected(item);
					}

				}
				return super.onContextItemSelected(item);
			}

			private Intent editIntent(Reminder reminder) {
				Intent editIntent = new Intent(getActivity().getApplicationContext(), EditReminderActivity.class);
				editIntent.putExtra("date", reminder.getDate());
				editIntent.putExtra("hour", reminder.getHour());
				return editIntent;
			}
			public void createUI() {
				lvReminderLate = (ListView) view.findViewById(R.id.lvRemindersLate);
				lvReminderToday = (ListView) view.findViewById(R.id.lvRemindersToday);
				lvReminderNextDays = (ListView) view.findViewById(R.id.lvRemindersNextDays);
				lvReminderNoDate = (ListView) view.findViewById(R.id.lvRemindersNoDate);
				updateListView(null);
				registerForContextMenu(lvReminderLate);
				registerForContextMenu(lvReminderToday);
				registerForContextMenu(lvReminderNextDays);
				registerForContextMenu(lvReminderNoDate);
			}

			public void updateListView(ReminderFilter filter) {
				if (filter == null)
					filter = new AllRemindersFilter(getActivity());
				adapter = new ReminderArrayAdapter(getActivity().getApplicationContext(), filter.getReminderList());
				ReminderArrayAdapter adapterLate, adapterToday, adapterNextDays, adapterNoDate;

				Reminder r = new Reminder();
				List<Reminder> remindersLate = new ArrayList<Reminder>();
				List<Reminder> remindersToday = new ArrayList<Reminder>();
				List<Reminder> remindersNextDays = new ArrayList<Reminder>();
				List<Reminder> remindersNoDate = new ArrayList<Reminder>();

				for (int i = 0; i < adapter.getCount(); ++i) {
					r = adapter.getItem(i);
					if (r.getDate() != null) {
						String day = r.getDate().substring(0, 2);
						String month = r.getDate().substring(3, 5);
						String year = r.getDate().substring(6, 10);

						Calendar cal = Calendar.getInstance();
						GregorianCalendar gc = new GregorianCalendar();
						if (r.getHour() != null) {
							String hour = r.getHour().substring(0, 2);
							String min = r.getHour().substring(3, 5);
							gc.set(Integer.parseInt(year), Integer.parseInt(month) - 1, Integer.parseInt(day),
									Integer.parseInt(hour), Integer.parseInt(min));
						} else {
							gc.set(Integer.parseInt(year), Integer.parseInt(month) - 1, Integer.parseInt(day));
						}
						if (gc.before(cal))
							remindersLate.add(r);
						else if ((cal.get(Calendar.YEAR) == gc.get(Calendar.YEAR))
								&& (cal.get(Calendar.MONTH) == gc.get(Calendar.MONTH))
								&& (cal.get(Calendar.DAY_OF_MONTH) == gc.get(Calendar.DAY_OF_MONTH)))
							remindersToday.add(r);
						else
							remindersNextDays.add(r);
					} else {
						remindersNoDate.add(r);
					}
				}

				adapterLate = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersLate,
						Color.rgb(0xED, 0x1C, 0x24), ReminderArrayAdapter.LATE);
				adapterToday = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersToday,
						Color.rgb(0x33, 0xB5, 0xE5), ReminderArrayAdapter.TODAY);
				adapterNextDays = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersNextDays,
						Color.rgb(0x99, 0x99, 0x99), ReminderArrayAdapter.NEXT_DAYS);
				adapterNoDate = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersNoDate,
						Color.rgb(0x00, 0x00, 0x00), ReminderArrayAdapter.NO_DATE);
				lvReminderLate.setAdapter(adapterLate);
				Utility.setListViewHeightBasedOnChildren(lvReminderLate);
				lvReminderToday.setAdapter(adapterToday);
				Utility.setListViewHeightBasedOnChildren(lvReminderToday);
				lvReminderNextDays.setAdapter(adapterNextDays);
				Utility.setListViewHeightBasedOnChildren(lvReminderNextDays);
				lvReminderNoDate.setAdapter(adapterNoDate);
				Utility.setListViewHeightBasedOnChildren(lvReminderNoDate);
			}

			public void onSelectedFilterChanged(ReminderFilter filter) {
				updateListView(filter);
			}
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import java.util.Iterator;

		import android.content.Context;
		import android.widget.ArrayAdapter;
		import br.unb.cic.reminders2.R;

		public class SpinnerAdapterGenerator<T> {

			public ArrayAdapter<T> getSpinnerAdapter(Iterable<T> items, Context context) {

				ArrayAdapter<T> adapter = new ArrayAdapter<T>(context.getApplicationContext(), R.layout.spinner_item);
				adapter.setDropDownViewResource(R.layout.spinner_dropdown_item);

				if (items != null && items.iterator().hasNext()) {
					Iterator<T> it = items.iterator();
					while (it.hasNext()) {
						adapter.add(it.next());
					}
				}

				return adapter;
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import java.util.Calendar;

		import android.app.Dialog;
		import android.app.DialogFragment;
		import android.app.TimePickerDialog;
		import android.content.DialogInterface;
		import android.os.Bundle;
		import android.widget.ArrayAdapter;
		import android.widget.Spinner;
		import android.widget.TimePicker;

		class TimePickerDialogFragment extends DialogFragment implements TimePickerDialog.OnTimeSetListener {

			private Calendar time;

			private Spinner spinnerTime;

			private int pHour;
			private int pMinute;

			public TimePickerDialogFragment(Calendar date, Spinner spinnerTime) {
				this.time = date;
				this.spinnerTime = spinnerTime;
			}

			@Override
			public Dialog onCreateDialog(Bundle savedInstanceState) {
				int hour = time.get(Calendar.HOUR_OF_DAY);
				int minute = time.get(Calendar.MINUTE);

				return new TimePickerDialog(getActivity(), this, hour, minute, true);
			}

			@SuppressWarnings("unchecked")
			@Override
			public void onDismiss(DialogInterface dialog) {
				time.set(Calendar.MINUTE, pMinute);
				time.set(Calendar.HOUR_OF_DAY, pHour);
				String sTime = Integer.toString(pMinute);
				if (pMinute < 10)
					sTime = "0" + sTime;
				sTime = Integer.toString(pHour) + ":" + sTime;

				ArrayAdapter<String> adapter = (ArrayAdapter<String>) spinnerTime.getAdapter();
				adapter.add(sTime);
				spinnerTime.setSelection(2);

				super.onDismiss(dialog);
			}

			public void onTimeSet(TimePicker view, int hour, int minute) {
				pHour = hour;
				pMinute = minute;
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.controller;

		import android.content.Context;
		import br.unb.cic.reminders.model.Reminder;

		public class AllRemindersFilter extends ReminderFilter {

			private final String name = "All";

			public AllRemindersFilter(Context context) {
				super(context);
			}

			@Override
			protected boolean selectReminder(Reminder r) {
				return true;
			}

			@Override
			public String getName() {
				return name;
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.controller;

		import java.util.ArrayList;
		import java.util.List;

		import android.content.Context;
		import br.unb.cic.reminders.model.Reminder;

		public abstract class ReminderFilter {

			private List<Reminder> reminders;
			private Context context;

			public ReminderFilter(Context context) {
				this.context = context;
			}

			public List<Reminder> getReminderList() {
				updateReminders();
				return reminders;
			}

			public int getNumReminders() {
				updateReminders();
				return reminders.size();
			}

			private void updateReminders() {
				reminders = new ArrayList<Reminder>();
				List<Reminder> allReminders = null;

				try {
					allReminders = Controller.instance(context).listReminders();
				} catch (Exception e) {
					e.printStackTrace();
				}

				for (Reminder r : allReminders) {
					if (selectReminder(r)) {
						reminders.add(r);
					}
				}
			}

			abstract protected boolean selectReminder(Reminder r);

			abstract public String getName();
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.model;

		import java.util.regex.Matcher;
		import java.util.regex.Pattern;

		import util.Patterns;
		import br.unb.cic.framework.persistence.DBTypes;
		import br.unb.cic.framework.persistence.annotations.Column;
		import br.unb.cic.framework.persistence.annotations.Entity;
		import br.unb.cic.framework.persistence.annotations.ForeignKey;
		import br.unb.cic.reminders.view.InvalidHourException;

		@Entity(table = "REMINDER")
		public class Reminder {

			@Column(column = "PK", primaryKey = true, type = DBTypes.LONG)
			private Long id;

			@Column(column = "TEXT", type = DBTypes.TEXT)
			private String text;

			@Column(column = "DETAILS", type = DBTypes.TEXT)
			private String details;

			@Column(column = "DATE", type = DBTypes.TEXT)
			private String date; 

			@Column(column = "HOUR", type = DBTypes.TEXT)
			private String hour; 

			@Column(column = "DONE", type = DBTypes.INT)
			private boolean done;

			public Reminder() {
			}

			public Reminder(Long id, String text) {
				this.id = id;
				this.text = text;
			}

			public Long getId() {
				return id;
			}

			public void setId(Long id) {
				this.id = id;
			}

			public String getText() {
				return text;
			}

			public void setText(String text) {
				if (text == null || text.trim().equals("")) {
					throw new InvalidTextException(text);
				}
				this.text = text;
			}

			public String getDetails() {
				return details;
			}

			public void setDetails(String details) {
				if (details == null || details.trim().equals("")) {
					this.details = null;
				} else {
					this.details = details;
				}
			}

			public String getDate() {
				return date;
			}

			public void setDate(String date) {
				if (!(date == null || date.equals("")) && !checkFormat(date, Patterns.DATE_PATTERN)) {
					throw new InvalidDateException(date);
				}
				this.date = date;
			}

			public String getHour() {
				return hour;
			}

			public void setHour(String hour) {
				if (!(hour == null || hour.equals("")) && !checkFormat(hour, Patterns.HOUR_PATTERN)) {
					throw new InvalidHourException(hour);
				}
				this.hour = hour;
			}

			private boolean checkFormat(String date, String pattern) {
				Pattern p = Pattern.compile(pattern);
				Matcher m = p.matcher(date);
				return m.matches();
			}

			public boolean isValid() {
				return (text != null && date != null && hour != null);
			}

			public boolean isDone() {
				return done;
			}

			public void setDone(boolean done) {
				this.done = done;
			}

			public int getDone() {
				return done ? 1 : 0;
			}

			public void setDone(int done) {
				this.done = (done == 0 ? false : true);
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.model.db;

		public class DBConstants {
			public static String DROP_TABLE_STATEMENTS[] = { "DROP TABLE IF EXISTS REMINDER"};

			public static String CREATE_TABLE_STATEMENTS[] = {
					"CREATE TABLE REMINDER ( " + "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "TEXT VARCHAR(50) NOT NULL,"
							+ "DETAILS VARCHAR(50) NULL," + tableStatement() + "DONE INTEGER NOT NULL);", };

			private static String tableStatement() {
				return "DATE CHAR(10) NULL," + "HOUR CHAR(5) NULL,";
			}

			public static final String SELECT_REMINDERS = "SELECT * FROM REMINDER";

			public static String REMINDER_TABLE = "REMINDER";
			public static String REMINDER_PK_COLUMN = "PK";
			public static String REMINDER_TEXT_COLUMN = "TEXT";
			public static String REMINDER_DETAILS_COLUMN = "DETAILS";
			public static String REMINDER_DATE_COLUMN = "DATE";
			public static String REMINDER_HOUR_COLUMN = "HOUR";
			public static String REMINDER_DONE_COLUMN = "DONE";

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.model.db;

		import android.content.Context;

		public abstract class DBFactory {
			protected Context context;

			public static DBFactory factory(Context context) {
				return new DefaultDBFactory(context);
			}

			public DBFactory(Context context) {
				this.context = context;
			}

			public abstract ReminderDAO createReminderDAO();
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.model.db;

		import android.content.Context;

		public class DefaultDBFactory extends DBFactory {

			public DefaultDBFactory(Context context) {
				super(context);
			}

			@Override
			public ReminderDAO createReminderDAO() {
				return new DefaultReminderDAO(context);
			}
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.model.cp;

		import android.content.ContentProvider;
		import android.content.ContentValues;
		import android.content.UriMatcher;
		import android.database.Cursor;
		import android.net.Uri;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.model.Reminder;
		import br.unb.cic.reminders.model.db.DBConstants;
		import br.unb.cic.reminders.model.db.DefaultDBFactory;
		import br.unb.cic.reminders.model.db.ReminderDAO;

		public class ReminderContentProvider extends ContentProvider {

			private static final int REMINDERS = 10;

			private static final String SECURITY_EXCEPTION = "You are not allowed to call this method";

			private static final String AUTHORITY = "br.com.positivo.reminders.contentprovider";
			private static final String BASE_PATH = "reminders";

			public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/" + BASE_PATH);

			public static final String text() {
				return DBConstants.REMINDER_TEXT_COLUMN;
			}

			public static final String date() {
				return DBConstants.REMINDER_DATE_COLUMN;
			}

			public static final String hour() {
				return DBConstants.REMINDER_HOUR_COLUMN;
			}

			private ReminderDAO rdao;

			private static final UriMatcher sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);

			static {
				sURIMatcher.addURI(AUTHORITY, BASE_PATH, REMINDERS);
			}

			@Override
			public boolean onCreate() {
				rdao = DefaultDBFactory.factory(getContext()).createReminderDAO();
				return false;
			}

			@Override
			public Uri insert(Uri uri, ContentValues values) {
				try {
					Reminder reminder = createReminderInsert(values);

					reminder.setText(values.getAsString(text()));

					Long id = rdao.saveReminder(reminder);
					getContext().getContentResolver().notifyChange(uri, null);
					return Uri.parse(BASE_PATH + "/" + id);
				} catch (DBException e) {
					throw new RuntimeException(e.getLocalizedMessage());
				}

			}

			private Reminder createReminderInsert(ContentValues values) throws DBException {
				Reminder reminder = new Reminder();
				reminder.setDate(values.getAsString(date()));
				reminder.setHour(values.getAsString(hour()));
				return reminder;
			}

			@Override
			public Cursor query(Uri arg0, String[] arg1, String arg2, String[] arg3, String arg4) {
				return null;
			}

			@Override
			public int delete(Uri arg0, String arg1, String[] arg2) {
				throw new SecurityException(SECURITY_EXCEPTION);
			}

			@Override
			public String getType(Uri arg0) {
				return null;
			}

			@Override
			public int update(Uri arg0, ContentValues arg1, String arg2, String[] arg3) {
				throw new SecurityException(SECURITY_EXCEPTION);
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import java.util.List;

		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.model.Reminder;

		public class AddReminderActivity extends ReminderActivity {

			@Override
			protected void initializeValues() {
			}

			@Override
			protected void persist(Reminder reminder) {
				try {
					Controller.instance(getApplicationContext()).addReminder(reminder);
				} catch (DBException e) {
					e.printStackTrace();
				}
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import java.util.List;

		import android.content.Intent;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.model.Reminder;

		public class EditReminderActivity extends ReminderActivity {

			@Override
			protected void initializeValues() {
				Intent intent = getIntent();

				long reminderId = intent.getLongExtra("id", 0);
				String text = intent.getStringExtra("text");
				String details = intent.getStringExtra("details");

				reminder.setId(reminderId);
				edtReminder.setText(text);
				edtDetails.setText(details);
				try {
					initializeValues(intent);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			private void initializeValues(Intent intent) throws Exception {
				String date = intent.getStringExtra("date");
				String hour = intent.getStringExtra("hour");
				updateSpinnerDateHour(spinnerDate, date);
				updateDateFromString(date);
				updateSpinnerDateHour(spinnerTime, hour);
				updateTimeFromString(hour);
			}

			@Override
			protected void persist(Reminder reminder) {
				try {
					Controller.instance(getApplicationContext()).updateReminder(reminder);
				} catch (DBException e) {
					e.printStackTrace();
				}
			}
		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import java.util.List;

		import android.content.Intent;
		import android.os.Bundle;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.model.Reminder;

		public class ExternalAddReminderActivity extends ReminderActivity {

			@Override
			protected void onCreate(Bundle savedInstanceState) {
				reminder = new Reminder();
				try {
					setReminderFromIntent();
				} catch (Exception e) {
					Intent intent2 = new Intent(getApplicationContext(), AddReminderActivity.class);
					startActivity(intent2);
					finish();
				}
				super.onCreate(savedInstanceState);
			}

			private void setReminderFromIntent() throws Exception {
				Intent intent = getIntent();
				String action = intent.getAction();
				String type = intent.getType();

				if (action.equals("br.com.positivo.reminders.ADD_REMINDER") && "text/plain".equals(type)) {
					String text = intent.getStringExtra("text");
					String details = intent.getStringExtra("details");

					reminder.setText(text);
					reminder.setDetails(details);
					reminderFromIntent(intent);
				} else
					reminder = null;

			}

			private void reminderFromIntent(Intent intent) throws Exception {
				String date = intent.getStringExtra("date");
				String hour = intent.getStringExtra("hour");
				reminder.setDate(date);
				reminder.setHour(hour);
			}

			@Override
			protected void initializeValues() {

				if (!reminder.isValid())
					return;

				edtReminder.setText(reminder.getText());
				edtDetails.setText(reminder.getDetails());
				try {
					initialize();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			private void initialize() throws Exception {
				updateSpinnerDateHour(spinnerDate, reminder.getDate());
				updateDateFromString(reminder.getDate());
				updateSpinnerDateHour(spinnerTime, reminder.getHour());
				updateTimeFromString(reminder.getHour());
			}

			@Override
			protected void persist(Reminder reminder) {
				try {
					Controller.instance(getApplicationContext()).addReminder(reminder);
				} catch (DBException e) {
					e.printStackTrace();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.view;

		import java.text.ParseException;
		import java.util.ArrayList;
		import java.util.Arrays;
		import java.util.Calendar;
		import java.util.List;

		import android.app.Activity;
		import android.app.DialogFragment;
		import android.os.Bundle;
		import android.util.Log;
		import android.view.KeyEvent;
		import android.view.MotionEvent;
		import android.view.View;
		import android.widget.AdapterView;
		import android.widget.AdapterView.OnItemSelectedListener;
		import android.widget.ArrayAdapter;
		import android.widget.Button;
		import android.widget.CheckBox;
		import android.widget.EditText;
		import android.widget.Spinner;
		import android.widget.Toast;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.model.InvalidDateException;
		import br.unb.cic.reminders.model.InvalidTextException;
		import br.unb.cic.reminders.model.Reminder;
		import br.unb.cic.reminders2.R;

		public abstract class ReminderActivity extends Activity {

			protected Reminder reminder;
			protected Calendar date, time;

			protected EditText edtReminder, edtDetails, edtDate, edtTime;
			protected Spinner spinnerDate, spinnerTime;
			private Button btnSave, btnCancel;

			@Override
			protected void onCreate(Bundle savedInstanceState) {
				super.onCreate(savedInstanceState);
				setContentView(R.layout.reminder_add);

				if (reminder == null)
					reminder = new Reminder();
				initializeFields();
				initializeListeners();
				initializeValues();
			}

			private void initializeFields() {
				btnSave = (Button) findViewById(R.id.btnSave);
				btnCancel = (Button) findViewById(R.id.btnCancel);
				edtReminder = (EditText) findViewById(R.id.edtReminder);
				edtDetails = (EditText) findViewById(R.id.edtDetails);
				spinnerDate = getSpinnerDate();
				spinnerTime = getSpinnerTime();

			}

			private void initializeListeners() {
				addListenerToBtnSave();
				addListenerToBtnCancel();
				addListenerToSpinnerDate();
				addListenerToSpinnerTime();
			}

			protected abstract void initializeValues();

			private void addListenerToBtnSave() {
				btnSave.setOnClickListener(new Button.OnClickListener() {
					public void onClick(View v) {
						try {
							createReminder();
							persist(reminder);
							finish();
						} catch (Exception e) {
							Log.e("ReminderActivity", e.getMessage());
							e.printStackTrace();
						}
					}

				});
			}

			private void addListenerToBtnCancel() {
				btnCancel.setOnClickListener(new Button.OnClickListener() {
					public void onClick(View v) {
						finish();
					}
				});
			}

			private void addListenerToSpinnerDate() {

				spinnerDate.setOnTouchListener(new View.OnTouchListener() {
					public boolean onTouch(View v, MotionEvent event) {
						spinnerDate = getSpinnerDate();
						return false;
					}
				});

				spinnerDate.setOnKeyListener(new View.OnKeyListener() {
					public boolean onKey(View v, int keyCode, KeyEvent event) {
						spinnerDate = getSpinnerDate();
						return false;
					}
				});

				spinnerDate.setOnItemSelectedListener(new OnItemSelectedListener() {

					public void onItemSelected(AdapterView<? extends Object> parent, View view, int pos, long id) {

						switch (pos) {
						case 0:
							date = null;
							break;
						case 1:
							if (date == null)
								date = Calendar.getInstance();
							DialogFragment newFragment = new DatePickerDialogFragment(date, spinnerDate);
							newFragment.show(getFragmentManager(), "datePicker");
							break;
						default:
						}
					}

					public void onNothingSelected(AdapterView<? extends Object> arg0) {
					}

				});
			}

			private void addListenerToSpinnerTime() {

				spinnerTime.setOnTouchListener(new View.OnTouchListener() {
					public boolean onTouch(View v, MotionEvent event) {
						spinnerTime = getSpinnerTime();
						return false;
					}
				});

				spinnerTime.setOnKeyListener(new View.OnKeyListener() {
					public boolean onKey(View v, int keyCode, KeyEvent event) {
						spinnerTime = getSpinnerTime();
						return false;
					}
				});

				spinnerTime.setOnItemSelectedListener(new OnItemSelectedListener() {

					public void onItemSelected(AdapterView<? extends Object> parent, View view, int pos, long id) {

						switch (pos) {
						case 0:
							time = null;
							break;
						case 1:
							if (time == null)
								time = Calendar.getInstance();
							DialogFragment newFragment = new TimePickerDialogFragment(time, spinnerTime);
							newFragment.show(getFragmentManager(), "timePicker");
							break;
						default:
						}
					}

					public void onNothingSelected(AdapterView<? extends Object> arg0) {
					}

				});

			}

			private void createReminder() {
				try {
					reminder.setText(edtReminder.getText().toString());
					reminder.setDetails(edtDetails.getText().toString());
					setValuesOnReminder();
				} catch (InvalidTextException e) {
					Toast.makeText(getApplicationContext(), "Invalid text.", Toast.LENGTH_SHORT).show();
				} catch (InvalidDateException e) {
					Toast.makeText(getApplicationContext(), "Invalid date.", Toast.LENGTH_SHORT).show();
				} catch (InvalidHourException e) {
					Toast.makeText(getApplicationContext(), "Invalid time.", Toast.LENGTH_SHORT).show();
				} catch (Exception e) {
					Toast.makeText(getApplicationContext(), "Serious error.", Toast.LENGTH_SHORT).show();
				}
			}

			private void setValuesOnReminder() throws Exception {
				reminder.setDate(dateToString());
				reminder.setHour(timeToString());
			}

			private String dateToString() {
				if (date == null)
					return null;
				String sDate;
				sDate = Integer.toString(date.get(Calendar.MONTH) + 1);
				if (date.get(Calendar.MONTH) + 1 < 10)
					sDate = "0" + sDate;
				sDate = Integer.toString(date.get(Calendar.DAY_OF_MONTH)) + "-" + sDate;
				if (date.get(Calendar.DAY_OF_MONTH) < 10)
					sDate = "0" + sDate;
				sDate += "-" + Integer.toString(date.get(Calendar.YEAR));
				return sDate;
			}

			private String timeToString() {
				if (time == null)
					return null;
				String sTime;
				sTime = Integer.toString(time.get(Calendar.MINUTE));
				if (time.get(Calendar.MINUTE) < 10)
					sTime = "0" + sTime;
				sTime = Integer.toString(time.get(Calendar.HOUR_OF_DAY)) + ":" + sTime;
				if (time.get(Calendar.HOUR_OF_DAY) < 10)
					sTime = "0" + sTime;
				return sTime;
			}

			protected void updateDateFromString(String sDate) {
				if (sDate == null || sDate.equals("")) {
					date = null;
					return;
				}
				char sDay[] = { sDate.charAt(0), sDate.charAt(1) };
				int day = Integer.parseInt(new String(sDay), 10);
				char sMonth[] = { sDate.charAt(3), sDate.charAt(4) };
				int month = Integer.parseInt(new String(sMonth), 10);
				char sYear[] = { sDate.charAt(6), sDate.charAt(7), sDate.charAt(8), sDate.charAt(9) };
				int year = Integer.parseInt(new String(sYear), 10);
				if (date == null)
					date = Calendar.getInstance();
				date.set(year, month - 1, day);
			}

			protected void updateTimeFromString(String sTime) {
				if (sTime == null || sTime.equals("")) {
					time = null;
					return;
				}
				char sHour[] = { sTime.charAt(0), sTime.charAt(1) };
				int hour = Integer.parseInt(new String(sHour), 10);
				char sMinute[] = { sTime.charAt(3), sTime.charAt(4) };
				int minute = Integer.parseInt(new String(sMinute), 10);
				if (time == null)
					time = Calendar.getInstance();
				time.set(Calendar.MINUTE, minute);
				time.set(Calendar.HOUR_OF_DAY, hour);
			}

			@SuppressWarnings("unchecked")
			protected void updateSpinnerDateHour(Spinner spinner, String dateOrHour) {
				if (dateOrHour == null)
					return;

				ArrayAdapter<String> adapter = (ArrayAdapter<String>) spinner.getAdapter();

				int count = adapter.getCount();
				if (count > 2) {
					for (int i = 2; i < count; ++i)
						adapter.remove(adapter.getItem(i));
				}
				adapter.add(dateOrHour);
				spinner.setSelection(2);
			}

			private Spinner getSpinnerDate() {
				Spinner spinner = (Spinner) findViewById(R.id.spinnerDate);

				SpinnerAdapterGenerator<String> adapterDateGenerator = new SpinnerAdapterGenerator<String>();

				List<String> items = new ArrayList<String>();
				items.add("No date");
				items.add("+ Select");

				spinner.setAdapter(adapterDateGenerator.getSpinnerAdapter(items, this));

				return spinner;
			}

			private Spinner getSpinnerTime() {
				Spinner spinner = (Spinner) findViewById(R.id.spinnerTime);

				SpinnerAdapterGenerator<String> adapterTimeGenerator = new SpinnerAdapterGenerator<String>();

				List<String> items = new ArrayList<String>();
				items.add("No time");
				items.add("+ Select");

				spinner.setAdapter(adapterTimeGenerator.getSpinnerAdapter(items, this));

				return spinner;
			}

			protected abstract void persist(Reminder reminder);

		}
		//#endif
	}
	adds {
		//#ifdef reminder
		package br.unb.cic.reminders.controller;

		import java.util.List;

		import android.content.Context;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.model.Reminder;
		import br.unb.cic.reminders.model.db.DBFactory;

		public class Controller {

			private Context context;

			private static Controller instance;

			private Controller(Context c) {
				this.context = c;
			}

			public static final Controller instance(Context c) {
				if (instance == null) {
					instance = new Controller(c);
				}

				return instance;
			}

			public List<Reminder> listReminders() throws Exception {
				try {
					return DBFactory.factory(context).createReminderDAO().listReminders();
				} catch (DBException e) {
					throw e;
				}
			}

			public void addReminder(Reminder reminder) throws DBException {
				try {
					DBFactory.factory(context).createReminderDAO().saveReminder(reminder);
				} catch (DBException e) {
					throw e;
				}
			}

			public void updateReminder(Reminder reminder) throws DBException {
				try {
					DBFactory.factory(context).createReminderDAO().updateReminder(reminder);
				} catch (DBException e) {
					throw e;
				}
			}

			public void deleteReminder(Reminder reminder) throws DBException {
				try {
					DBFactory.factory(context).createReminderDAO().deleteReminder(reminder);
				} catch (DBException e) {
					throw e;
				}
			}

			public void persistReminder(Reminder reminder) throws DBException {
				try {
					DBFactory.factory(context).createReminderDAO().persistReminder(reminder);
				} catch (DBException e) {
					throw e;
				}
			}

			private void notImplementedYet() {
				throw new RuntimeException("not implemented yet");
			}
		}
		//#endif
	}
}
