delta dDateRangeManageCategory {
	modifies br.unb.cic.reminders.model.cp.ReminderContentProvider {
		removes insert(Uri uri, ContentValues values);
		adds @Override public Uri insert(Uri uri, ContentValues values) {
			try {
				Reminder reminder = new Reminder();
	
				Category category = cdao.findCategory(values.getAsString(category()));
	
				if (category == null) {
					Category auxCategory = new Category();
					auxCategory.setName(values.getAsString(category()));
					cdao.saveCategory(auxCategory);
					category = cdao.findCategory(values.getAsString(category()));
				}
				reminder.setCategory(category);
				reminder.setText(values.getAsString(text()));
				reminder.setDateStart(values.getAsString(dateStart()));
				reminder.setHourStart(values.getAsString(hourStart()));
				reminder.setDateFinal(values.getAsString(dateFinal()));
				reminder.setHourFinal(values.getAsString(hourFinal()));
	
				Long id = rdao.saveReminder(reminder);
				getContext().getContentResolver().notifyChange(uri, null);
				return Uri.parse(BASE_PATH + "/" + id);
			} catch (DBException e) {
				throw new RuntimeException(e.getLocalizedMessage());
			}
	
		}
	}
	modifies br.unb.cic.reminders.model.db.DBConstants {
		removes CREATE_TABLE_STATEMENTS;
		adds public static String CREATE_TABLE_STATEMENTS[] = { "CREATE TABLE CATEGORY("
			+ "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "NAME VARCHAR(50) NOT NULL, " + "LOCKED INT NOT NULL);",

			"CREATE TABLE REMINDER ( " + "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "TEXT VARCHAR(50) NOT NULL,"
					+ "DETAILS VARCHAR(50) NULL,"
					+ "FK_CATEGORY INTEGER NOT NULL REFERENCES CATEGORY ON DELETE CASCADE," + "INITIAL_DATE CHAR(10) NOT NULL,"
					+ "INITIAL_HOUR CHAR(5) NULL," + "FINAL_DATE CHAR(10) NOT NULL,"
					+ "FINAL_HOUR CHAR(5) NULL," + "DONE INTEGER NOT NULL);", };
	}
	modifies br.unb.cic.reminders.model.db.DefaultReminderDAO {
		removes cursorToReminder(Cursor cursor);
		adds private Reminder cursorToReminder(Cursor cursor) throws DBException {
			Long pk = cursor.getLong(cursor.getColumnIndex(DBConstants.REMINDER_PK_COLUMN));
			String text = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_TEXT_COLUMN));
			String details = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_DETAILS_COLUMN));
			String dateStart = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_INITIAL_DATE_COLUMN));
			String hourStart = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_INITIAL_HOUR_COLUMN));
			String dateFinal = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_FINAL_DATE_COLUMN));
			String hourFinal = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_FINAL_HOUR_COLUMN));
			int done = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_DONE_COLUMN));
			Long categoryId = cursor.getLong(cursor.getColumnIndex(DBConstants.REMINDER_FK_CATEGORY_COLUMN));
	
			Category category = DBFactory.factory(context).createCategoryDAO().findCategoryById(categoryId);
	
			Reminder reminder = new Reminder();
	
			reminder.setText(text);
			reminder.setDetails(details);
			reminder.setId(pk);
			reminder.setDateStart(dateStart);
			reminder.setHourStart(hourStart);
			reminder.setDateFinal(dateFinal);
			reminder.setHourFinal(hourFinal);
			reminder.setDone(done);
			reminder.setCategory(category);
	
			return reminder;
		}
	}
	modifies br.unb.cic.reminders.view.ExternalAddReminderActivity {
		removes setReminderFromIntent();
		adds private void setReminderFromIntent() throws Exception {
			Intent intent = getIntent();
			String action = intent.getAction();
			String type = intent.getType();
	
			// Gets the information from the intent if it is an edit call
			if (action.equals("br.com.positivo.reminders.ADD_REMINDER") && "text/plain".equals(type)) {
				String text = intent.getStringExtra("text");
				String details = intent.getStringExtra("details");
				String categoryName = intent.getStringExtra("category_name");
				String dateStart = intent.getStringExtra("dateStart");
				String hourStart = intent.getStringExtra("hourStart");
				String dateFinal = intent.getStringExtra("dateFinal");
				String hourFinal = intent.getStringExtra("hourFinal");
	
				List<Category> categories = Controller.instance(getApplicationContext()).listCategories();
				for (Category c : categories) {
					if (c.getName().equals(categoryName)) {
						newCategory = c;
						break;
					}
				}
				if (newCategory == null) {
					isNewCategory = true;
					newCategory = new Category();
					newCategory.setName(categoryName);
				}
				reminder.setText(text);
				reminder.setDetails(details);
				reminder.setDateStart(dateStart);
				reminder.setHourStart(hourStart);
				reminder.setDateFinal(dateFinal);
				reminder.setHourFinal(hourFinal);
				reminder.setCategory(newCategory);
			} else
				reminder = null;
	
		}
		removes initializeValues();
		adds @Override protected void initializeValues() {
	
			if (!reminder.isValid())
				return;
	
			edtReminder.setText(reminder.getText());
			edtDetails.setText(reminder.getDetails());
			updateSpinnerDateHour(spinnerDateStart, reminder.getDateStart());
			updateDateFromString(reminder.getDateStart(), false);
			updateSpinnerDateHour(spinnerTimeStart, reminder.getHourStart());
			updateTimeFromString(reminder.getHourStart(), false);
			updateSpinnerDateHour(spinnerDateStart, reminder.getDateFinal());
			updateDateFromString(reminder.getDateFinal(), true);
			updateSpinnerDateHour(spinnerTimeStart, reminder.getHourFinal());
			updateTimeFromString(reminder.getHourFinal(), true);
			try {
				if (isNewCategory)
					spinnerCategory.setSelection(spinnerCategory.getCount() - 2);
				else
					spinnerCategory.setSelection(categoryToIndex(reminder.getCategory()));
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	
		}
	}
	modifies br.unb.cic.reminders.view.ReminderActivity {
		removes initializeFields_original0();
		removes initializeFields_original4();
		removes initializeFields();
		adds private void initializeFields() {
			btnSave = (Button) findViewById(R.id.btnSave);
			btnCancel = (Button) findViewById(R.id.btnCancel);
			edtReminder = (EditText) findViewById(R.id.edtReminder);
			edtDetails = (EditText) findViewById(R.id.edtDetails);
			spinnerDateStart = getSpinnerDateStart();
			spinnerTimeStart = getSpinnerTimeStart();
			spinnerDateFinal = getSpinnerDateFinal();
			spinnerTimeFinal = getSpinnerTimeFinal();
			// edtDate = (EditText) findViewById(R.id.selectedDate);
			// edtTime = (EditText) findViewById(R.id.selectedTime);
			try {
				spinnerCategory = getSpinnerCategory();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	
		}
		removes createReminder();
		adds private void createReminder() {
			try {
				reminder.setText(edtReminder.getText().toString());
				reminder.setDetails(edtDetails.getText().toString());
				reminder.setDateStart(dateToString(dateStart));
				reminder.setHourStart(timeToString(timeStart));
				reminder.setDateFinal(dateToString(dateFinal));
				reminder.setHourFinal(timeToString(timeFinal));
				reminder.setCategory((Category) spinnerCategory.getSelectedItem());
			} catch (InvalidTextException e) {
				// This catch is handling both Reminder's Text and Details.
				Toast.makeText(getApplicationContext(), "Texto inválido.", Toast.LENGTH_SHORT).show();
			} catch (InvalidDateException e) {
				Toast.makeText(getApplicationContext(), "Data inválida.", Toast.LENGTH_SHORT).show();
			} catch (InvalidHourException e) {
				Toast.makeText(getApplicationContext(), "Hora inválida.", Toast.LENGTH_SHORT).show();
			} catch (Exception e) {
				// this is an exceptional case that needs to be studied
				Toast.makeText(getApplicationContext(), "Erro grave.", Toast.LENGTH_SHORT).show();
			}
		}
	}
	modifies br.unb.cic.reminders.view.ReminderAddActivity {
		removes updateFieldsFromReminder_original2(Reminder reminder);
		removes updateFieldsFromReminder_original5(Reminder reminder);
		removes createReminder();
		adds private Reminder createReminder() {
			/*
			 * Since view's not passing all the information yet (priority ...), we
			 * instantiate a reminder initially passing only "text" and "date".
			 */
			Reminder reminder = new Reminder();
			try {
				reminder.setText(edtReminder.getText().toString());
				reminder.setDetails(edtDetails.getText().toString());
				reminder.setDateStart(edtDateStart.getText().toString());
				reminder.setHourStart(edtHourStart.getText().toString());
				reminder.setDateFinal(edtDateFinal.getText().toString());
				reminder.setHourFinal(edtHourFinal.getText().toString());
				reminder.setCategory(selectedCategory);
			} catch (InvalidTextException e) {
				Toast.makeText(getApplicationContext(), "Texto invalido.", Toast.LENGTH_SHORT).show();
			} catch (InvalidDateException e) {
				Toast.makeText(getApplicationContext(), "Data invalida.", Toast.LENGTH_SHORT).show();
			} catch (InvalidHourException e) {
				Toast.makeText(getApplicationContext(), "Hora invalida.", Toast.LENGTH_SHORT).show();
			}
			return reminder;
		}
		removes getExistingReminder();
		adds private Reminder getExistingReminder() {
			Reminder reminder = null;
	
			Intent intent = getIntent();
			String action = intent.getAction();
			String type = intent.getType();
	
			// Gets the information from the intent if it is an edit call
			if (Intent.ACTION_SEND.equals(action) && "text/plain".equals(type)) {
				previewReminderId = intent.getLongExtra("id", 0);
				String text = intent.getStringExtra("text");
				String categoryName = intent.getStringExtra("category_name");
				String categoryId = intent.getStringExtra("category_id");
				String dateStart = intent.getStringExtra("dateStart");
				String hourStart = intent.getStringExtra("hourStart");
				String dateFinal = intent.getStringExtra("dateFinal");
				String hourFinal = intent.getStringExtra("hourFinal");
	
				reminder = new Reminder();
				reminder.setText(text);
				Category category = new Category();
				category.setName(categoryName);
				category.setId(Long.parseLong(categoryId));
				reminder.setCategory(category);
				reminder.setDateStart(dateStart);
				reminder.setHourStart(hourStart);
				reminder.setDateFinal(dateFinal);
				reminder.setHourFinal(hourFinal);
				reminder.setId(previewReminderId);
			}
	
			return reminder;
		}
		removes getReminderFromIntent();
		adds private Reminder getReminderFromIntent() {
			Intent intent = getIntent();
			String action = intent.getAction();
			String type = intent.getType();
	
			/*
			 * External apps which wants to share content with "Lembretes" must
			 * follow the protocol described by the "if" below, that is, they must
			 * instantiate an intent and set:
			 * 
			 * ACTION as "br.com.positivo.reminders.ADD_REMINDER"; MIME as
			 * "text/plain";
			 * 
			 * and pass the contents through "putExtra" in the following fields:
			 * "text", "details", "category", "date", "hour" and "priority".
			 */
			if ("br.com.positivo.reminders.ADD_REMINDER".equals(action) && "text/plain".equals(type)) {
				try {
					String text = intent.getStringExtra("text");
					String details = intent.getStringExtra("details");
					String category = intent.getStringExtra("category");
					String dateStart = intent.getStringExtra("dateStart");
					String hourStart = intent.getStringExtra("hourStart");
					String dateFinal = intent.getStringExtra("dateFinal");
					String hourFinal = intent.getStringExtra("hourFinal");
	
					/*
					 * Code below just validates the data supplied, since validation
					 * code is implemented in setter methods.
					 */
	
					// Would we better apply validations here?
					Reminder reminder = new Reminder();
					reminder.setText(text);
					reminder.setDetails(details);
	
					Category auxCategory = new Category();
					auxCategory.setName(category);
					reminder.setCategory(auxCategory);
	
					reminder.setDateStart(dateStart);
					reminder.setHourStart(hourStart);
					reminder.setDateFinal(dateFinal);
					reminder.setHourFinal(hourFinal);
	
					/*
					 * Upon here, all validations were applied and we have a valid
					 * reminder. So, we return it.
					 */
					return reminder;
				} catch (InvalidFormatException e) {
					/*
					 * What would be better? 1. Return user to the calling activity.
					 * 2. Show an empty reminder's add form (implemented now).
					 */
				}
			}
			/*
			 * If this activity was not started from an external app or a valid
			 * reminder could not be derived, we simply return "null".
			 */
			return null;
		}
		removes updateFieldsFromReminder(Reminder reminder);
		adds private void updateFieldsFromReminder(Reminder reminder) throws Exception {
			edtReminder.setText(reminder.getText());
			edtDetails.setText(reminder.getDetails());
			edtDateStart.setText(reminder.getDateStart());
			edtHourStart.setText(reminder.getHourStart());
			edtDateFinal.setText(reminder.getDateFinal());
			edtHourFinal.setText(reminder.getHourFinal());
			spinnerCategory.setSelection(categoryToIndex(reminder.getCategory()));
		}
	}
	modifies br.unb.cic.reminders.view.ReminderListFragment {
		removes onContextItemSelected(MenuItem item);
		adds @Override public boolean onContextItemSelected(MenuItem item) {
			if (item.getGroupId() == R.id.context_menu_reminder) { // Used to verify
				// if it is the right context_menu
	
				// Gets the item position and gets the reminder in that position:
				AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
				Reminder reminder = (Reminder) contextMenuAdapter.getItem(info.position);
	
				// Switch between the options in the context menu(Edit, Delete and
				// Share)
				switch (item.getItemId()) {
				case R.id.edit:
					// Passes the current reminder to be edited via Intent and
					// Invokes edit method
					Intent editIntent = new Intent(getActivity().getApplicationContext(), EditReminderActivity.class);
					editIntent.putExtra("id", reminder.getId());
					editIntent.putExtra("text", reminder.getText());
					editIntent.putExtra("details", reminder.getDetails());
					editIntent.putExtra("category_name", reminder.getCategory().getName());
					editIntent.putExtra("category_id", Long.toString(reminder.getCategory().getId()));
					editIntent.putExtra("dateStart", reminder.getDateStart());
					editIntent.putExtra("hourStart", reminder.getHourStart());
					editIntent.putExtra("dateFinal", reminder.getDateFinal());
					editIntent.putExtra("hourFinal", reminder.getHourFinal());
					startActivity(editIntent);
					updateListView(null);
					return true;
				case R.id.delete:
					// Invokes delete method
					try {// Deletes from the bank;
						Controller.instance(getActivity().getApplicationContext()).deleteReminder(reminder);
					} catch (DBException e) {
						Log.e(TAG, e.getMessage());
					}
					updateListView(null);
					return true;
				default:
					return super.onContextItemSelected(item);
				}
	
			}
			return super.onContextItemSelected(item);
		}
	}
}