delta dDateRangePriotity {
	modifies br.unb.cic.reminders.model.cp.ReminderContentProvider {
		removes insert(Uri uri, ContentValues values);
		adds @Override public Uri insert(Uri uri, ContentValues values) {
			try {
				Reminder reminder = new Reminder();
	
				reminder.setText(values.getAsString(text()));
				reminder.setDateStart(values.getAsString(dateStart()));
				reminder.setHourStart(values.getAsString(hourStart()));
				reminder.setDateFinal(values.getAsString(dateFinal()));
				reminder.setHourFinal(values.getAsString(hourFinal()));
	
				Long id = rdao.saveReminder(reminder);
				getContext().getContentResolver().notifyChange(uri, null);
				return Uri.parse(BASE_PATH + "/" + id);
			} catch (DBException e) {
				throw new RuntimeException(e.getLocalizedMessage());
			}
	
		}
	}
	modifies br.unb.cic.reminders.model.db.DBConstants {
		removes CREATE_TABLE_STATEMENTS;
		adds public static String CREATE_TABLE_STATEMENTS = 
			"CREATE TABLE REMINDER ( " + "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "TEXT VARCHAR(50) NOT NULL,"
					+ "DETAILS VARCHAR(50) NULL," + "INITIAL_DATE CHAR(10) NOT NULL,"
					+ "INITIAL_HOUR CHAR(5) NULL," + "FINAL_DATE CHAR(10) NOT NULL,"
					+ "FINAL_HOUR CHAR(5) NULL," + "PRIORITY INTEGER NOT NULL," + "DONE INTEGER NOT NULL);";
	}
	modifies br.unb.cic.reminders.model.db.DefaultReminderDAO {
		removes cursorToReminder(Cursor cursor);
		adds private Reminder cursorToReminder(Cursor cursor) throws DBException {
			Long pk = cursor.getLong(cursor.getColumnIndex(DBConstants.REMINDER_PK_COLUMN));
			String text = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_TEXT_COLUMN));
			String details = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_DETAILS_COLUMN));
			String dateStart = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_INITIAL_DATE_COLUMN));
			String hourStart = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_INITIAL_HOUR_COLUMN));
			String dateFinal = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_FINAL_DATE_COLUMN));
			String hourFinal = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_FINAL_HOUR_COLUMN));
			int priority = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_PRIORITY_COLUMN));
			int done = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_DONE_COLUMN));
	
			Reminder reminder = new Reminder();
	
			reminder.setText(text);
			reminder.setDetails(details);
			reminder.setId(pk);
			reminder.setDateStart(dateStart);
			reminder.setHourStart(hourStart);
			reminder.setDateFinal(dateFinal);
			reminder.setHourFinal(hourFinal);
			reminder.setPriority(Priority.fromCode(priority));
			reminder.setDone(done);
	
			return reminder;
		}
	}
}