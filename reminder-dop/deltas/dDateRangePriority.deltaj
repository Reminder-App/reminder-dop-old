delta dDateRangePriority {
	modifies br.unb.cic.reminders.model.db.DBConstants {
		removes CREATE_TABLE_STATEMENTS;
		adds public static String CREATE_TABLE_STATEMENTS = 
			"CREATE TABLE REMINDER ( " + "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "TEXT VARCHAR(50) NOT NULL,"
					+ "DETAILS VARCHAR(50) NULL," + "INITIAL_DATE CHAR(10) NOT NULL,"
					+ "INITIAL_HOUR CHAR(5) NULL," + "FINAL_DATE CHAR(10) NOT NULL,"
					+ "FINAL_HOUR CHAR(5) NULL," + "PRIORITY INTEGER NOT NULL," + "DONE INTEGER NOT NULL);";
	}
	modifies br.unb.cic.reminders.view.ReminderListFragment {
		removes onContextItemSelected(MenuItem item);
		adds @Override public boolean onContextItemSelected(MenuItem item) {
			if (item.getGroupId() == R.id.context_menu_reminder) { // Used to verify
				// if it is the right context_menu
	
				// Gets the item position and gets the reminder in that position:
				AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
				Reminder reminder = (Reminder) contextMenuAdapter.getItem(info.position);
	
				// Switch between the options in the context menu(Edit, Delete and
				// Share)
				switch (item.getItemId()) {
				case R.id.edit:
					// Passes the current reminder to be edited via Intent and
					// Invokes edit method
					Intent editIntent = new Intent(getActivity().getApplicationContext(), EditReminderActivity.class);
					editIntent.putExtra("id", reminder.getId());
					editIntent.putExtra("text", reminder.getText());
					editIntent.putExtra("details", reminder.getDetails());
					editIntent.putExtra("dateStart", reminder.getDateStart());
					editIntent.putExtra("hourStart", reminder.getHourStart());
					editIntent.putExtra("dateFinal", reminder.getDateFinal());
					editIntent.putExtra("hourFinal", reminder.getHourFinal());
					editIntent.putExtra("priority", Integer.toString(reminder.getPriority()));
					startActivity(editIntent);
					updateListView(null);
					return true;
				case R.id.delete:
					// Invokes delete method
					try {// Deletes from the bank;
						Controller.instance(getActivity().getApplicationContext()).deleteReminder(reminder);
					} catch (DBException e) {
						Log.e(TAG, e.getMessage());
					}
					updateListView(null);
					return true;
				default:
					return super.onContextItemSelected(item);
				}
	
			}
			return super.onContextItemSelected(item);
		}
	}
	modifies br.unb.cic.reminders.view.EditReminderActivity {
		removes initializeValues();
		adds @Override protected void initializeValues() {
			Intent intent = getIntent();
	
			// Gets the information from the intent if it is an edit call
			long reminderId = intent.getLongExtra("id", 0);
			String text = intent.getStringExtra("text");
			String details = intent.getStringExtra("details");
			String dateStart = intent.getStringExtra("dateStart");
			String hourStart = intent.getStringExtra("hourStart");
			String dateFinal = intent.getStringExtra("dateFinal");
			String hourFinal = intent.getStringExtra("hourFinal");
			String priority = intent.getStringExtra("priority");
	
			reminder.setId(reminderId);
			edtReminder.setText(text);
			edtDetails.setText(details);
			updateSpinnerDateHour(spinnerDateStart, dateStart);
			updateDateFromString(dateStart, false);
			updateSpinnerDateHour(spinnerTimeStart, hourStart);
			updateTimeFromString(hourStart, false);
			updateSpinnerDateHour(spinnerDateFinal, dateFinal);
			updateDateFromString(dateFinal, true);
			updateSpinnerDateHour(spinnerTimeFinal, hourFinal);
			updateTimeFromString(hourFinal, false);
			spinnerPriority.setSelection(Priority.fromCode(Integer.parseInt(priority, 10)).getCode());
		}
	}
	modifies br.unb.cic.reminders.model.Reminder {
		removes isValid();
		adds public boolean isValid() {
			return (text != null && dateStart != null && hourStart != null
					&& dateFinal != null && hourFinal != null && priority != null);
		}
	}
}