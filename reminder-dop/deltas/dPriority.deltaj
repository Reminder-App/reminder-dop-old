delta dPriority {
	modifies br.unb.cic.reminders.view.ReminderFilterArrayAdapter {
		removes ReminderFilterArrayAdapter(Context context, List<ReminderFilter> objects);
		adds public ReminderFilterArrayAdapter(Context context, List<ReminderFilter> objects) {
			super(context, R.layout.category_row, objects);
		}
		removes getView(int position, View convertView, ViewGroup parent);
		adds @Override public View getView(int position, View convertView, ViewGroup parent) {
			LinearLayout filterRow;
	
			// Inflate the view
			if (convertView == null) {
				filterRow = new LinearLayout(getContext());
				String inflater = Context.LAYOUT_INFLATER_SERVICE;
				LayoutInflater vi;
				vi = (LayoutInflater) getContext().getSystemService(inflater);
				vi.inflate(R.layout.category_row, filterRow, true);
			} else {
				filterRow = (LinearLayout) convertView;
			}
	
			TextView tvFilter = (TextView) filterRow.findViewById(R.id.row_categoryName);
			tvFilter.setText(getItem(position).getName());
	
			TextView tvNumReminders = (TextView) filterRow.findViewById(R.id.row_categoryCounter);
			tvNumReminders.setText(Integer.toString(getItem(position).getNumReminders()));
	
			return filterRow;
		}
	}
	modifies br.unb.cic.reminders.ReminderMainActivity {
		adds import br.unb.cic.reminders.view.FilterListFragment;
		removes createUI();
		adds private void createUI() {
			FragmentTransaction ft = getFragmentManager().beginTransaction();
			ReminderListFragment listReminderFragment = new ReminderListFragment();
			FilterListFragment listCategoryFragment = new FilterListFragment();
			listCategoryFragment.addListener(listReminderFragment);
			ft.add(R.id.listReminders, listReminderFragment);
			ft.add(R.id.listCategories, listCategoryFragment);
			ft.commit();
		}
	}
	adds {
		package br.unb.cic.reminders.view;
		
		import java.util.ArrayList;
		import java.util.List;
		
		import android.app.Fragment;
		import android.os.Bundle;
		import android.util.Log;
		import android.view.ContextMenu;
		import android.view.ContextMenu.ContextMenuInfo;
		import android.view.LayoutInflater;
		import android.view.MenuInflater;
		import android.view.View;
		import android.view.ViewGroup;
		import android.widget.AdapterView;
		import android.widget.AdapterView.OnItemClickListener;
		import android.widget.Button;
		import android.widget.ListView;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.controller.AllRemindersFilter;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.controller.PriorityFilter;
		import br.unb.cic.reminders.controller.ReminderFilter;
		import br.unb.cic.reminders.model.Priority;
		import br.unb.cic.reminders2.R;
		
		/**
		* A list fragment that holds the list of categories.
		*
		* @author rbonifacio
		*/
		public class FilterListFragment extends Fragment implements OnItemClickListener {
		
		private static final String CURRENT_FILTER_KEY = "current_filter";
		
		private static String TAG = "filter fragment list";
		
		private int currentFilterIndex;
		
		private List<FiltersListChangeListener> listeners;
		
		private FiltersListChangeListener filtersChangeListener;
		
		private int currentFilterId;
		// Used to list the filters.
		private ReminderFilterArrayAdapter adapter;
		private View view;
		
		private Button btAddCategory;
		private ListView lvFilters;
		
		@Override
		public void onActivityCreated(Bundle savedInstanceState) {
			super.onActivityCreated(savedInstanceState);
		
			// this way, we could retrieve the selected filter
			// after an orientation change.
			if (savedInstanceState != null) {
				currentFilterIndex = savedInstanceState.getInt(CURRENT_FILTER_KEY);
			}
		
			/*
			 * categoryList = new ArrayList<String>();
			 *
			 * setListAdapter(new ArrayAdapter<String>(getActivity(),
			 * R.layout.list_content));
			 *
			 * ListView thisListView = getListView();
			 *
			 * categoriesArrayAdapter = (ArrayAdapter<String>)getListAdapter();
			 *
			 * thisListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
			 * thisListView.setBackgroundColor(Color.WHITE);
			 */
		
			currentFilterId = 0;
		
			adapter = null;
		}
		
		/**
		 * Creates the view.
		 */
		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
			view = inflater.inflate(R.layout.categories_list_fragment, container, false);
			createUI();
			return view;
		}
		
		/**
		 * When resumed updates the filters list view.
		 */
		@Override
		public void onResume() {
			super.onResume();
			updateListView();
		}
		
		/**
		 * Creates the context menu where shows the Edit and Delete options.
		 */
		// @Override
		public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
			super.onCreateContextMenu(menu, v, menuInfo);
		
			menu.setHeaderTitle(R.string.context_menu_category_title);
		
			MenuInflater inflater = getActivity().getMenuInflater();
			inflater.inflate(R.menu.category_list_fragment_context_menu, menu);
		}
		
		/**
		 * Provides each action based in the chosen option(Edit or Delete).
		 **/
		/*
		 * @Override public boolean onContextItemSelected(MenuItem item) {
		 *
		 * if(item.getGroupId() == R.id.context_menu_category) { //Used to verify if
		 * it is the right context_menu //Gets the item position and gets the
		 * category in that position: AdapterView.AdapterContextMenuInfo info =
		 * (AdapterView.AdapterContextMenuInfo)item.getMenuInfo(); Category category
		 * = (Category)lvCategory.getAdapter().getItem(info.position);
		 *
		 * //Switch between the options in the context menu(Edit and Delete) switch
		 * (item.getItemId()) { case R.id.edit: //Passes the current reminder to be
		 * edited via Intent and Invokes edit method DialogFragment newFragment =
		 * new EditCategoryDialogFragment(category);
		 * newFragment.show(getFragmentManager(),
		 * ""+R.string.dialog_editcategory_title); updateListView(); return true;
		 * case R.id.delete: //Invokes delete method try {//Deletes from the bank;
		 * Controller
		 * .instance(getActivity().getApplicationContext()).deleteCategory(
		 * category); } catch (DBException e) { Log.e(TAG,e.getMessage()); }
		 * updateListView(); return true; default: return
		 * super.onContextItemSelected(item); }
		 *
		 * } return super.onContextItemSelected(item); }
		 */
		
		public void addListener(FiltersListChangeListener filter) {
			if (listeners == null)
				listeners = new ArrayList<FiltersListChangeListener>();
			listeners.add(filter);
		}
		
		public void notifyListeners(ReminderFilter filter) {
			for (FiltersListChangeListener c : listeners) {
				c.onSelectedFilterChanged(filter);
			}
		}
		
		/**
		 * Creates the User Interface.
		 **/
		private void createUI() {
		
			// Button to add a Category:
			// btAddCategory = (Button) view.findViewById(R.id.btAddCategory);
			// btAddCategory.setOnClickListener(new OnClickListener() {
			//
			// public void onClick(View v) {// Creates one DialogFragment to add a
			// // category
			// DialogFragment newFragment = new AddCategoryDialogFragment();
			// newFragment.show(getFragmentManager(), ""
			// + R.string.dialog_addcategory_title);
			// }
			// });
		
			// List of filters
			lvFilters = (ListView) view.findViewById(R.id.listCategories);
			lvFilters.setOnItemClickListener(this);
			registerForContextMenu(lvFilters);
			updateListView();
		}
		
		/**
		 * Used to populate the list view with the current filters and other
		 * filters.
		 */
		private void updateListView() {
		
			List<ReminderFilter> filters = new ArrayList<ReminderFilter>();
		
			// Add the allReminders to the filter list
			AllRemindersFilter allRemindersFilter = new AllRemindersFilter(getActivity());
			filters.add(allRemindersFilter);
		
			// Add the priorities to the filter list
			PriorityFilter highPriorityFilter = new PriorityFilter(Priority.HIGH, getActivity());
			filters.add(highPriorityFilter);
			PriorityFilter normalPriorityFilter = new PriorityFilter(Priority.NORMAL, getActivity());
			filters.add(normalPriorityFilter);
			PriorityFilter lowPriorityFilter = new PriorityFilter(Priority.LOW, getActivity());
			filters.add(lowPriorityFilter);
		
			adapter = new ReminderFilterArrayAdapter(getActivity().getApplicationContext(), filters);
		
			lvFilters.setAdapter(adapter);
		}
		
		public void onItemClick(AdapterView<? extends Object> adapterView, View view, int position, long id) {
			notifyListeners(adapter.getItem(position));
		
		}
		
		public void onNothingSelected(AdapterView<? extends Object> arg0) {
			// TODO Auto-generated method stub
		
		}
		
		}
	}
	modifies br.unb.cic.reminders.model.db.DBConstants {
		removes CREATE_TABLE_STATEMENTS;
		adds public static String CREATE_TABLE_STATEMENTS[] = {
			"CREATE TABLE REMINDER ( " + "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "TEXT VARCHAR(50) NOT NULL,"
					+ "DETAILS VARCHAR(50) NULL," + "DATE CHAR(10) NULL,"
					+ "HOUR CHAR(5) NULL," + "PRIORITY INTEGER NOT NULL," + "DONE INTEGER NOT NULL);", };
	
		removes SELECT_REMINDERS;
		adds public static final String SELECT_REMINDERS = "SELECT PK, TEXT, DETAILS, DATE, HOUR, PRIORITY, DONE FROM REMINDER";
	
		adds public static String REMINDER_PRIORITY_COLUMN = "PRIORITY";
	}
	adds {
		package br.unb.cic.reminders.controller;
		
		import android.content.Context;
		import br.unb.cic.reminders.model.Priority;
		import br.unb.cic.reminders.model.Reminder;
		
		public class PriorityFilter extends ReminderFilter {
		
			private Priority priority;
		
			public PriorityFilter(Priority priority, Context context) {
				super(context);
				this.priority = priority;
			}
		
			@Override
			protected boolean selectReminder(Reminder r) {
				return r.getPriority() == priority.getCode();
			}
		
			@Override
			public String getName() {
				return priority.toString();
			}
		
		}
	}
	modifies br.unb.cic.reminders.model.db.DefaultReminderDAO {
		adds import br.unb.cic.reminders.model.Priority;
		removes cursorToReminder(Cursor cursor);
		adds private Reminder cursorToReminder(Cursor cursor) throws DBException {
			Long pk =
					cursor.getLong(cursor.getColumnIndex(DBConstants.REMINDER_PK_COLUMN));
			String text =
					cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_TEXT_COLUMN));
			String details =
					cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_DETAILS_COLUMN));
			String date =
					cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_DATE_COLUMN));
			String hour =
					cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_HOUR_COLUMN));
			int priority = cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_PRIORITY_COLUMN));
			int done =
					cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_DONE_COLUMN));
			Reminder reminder = new Reminder();
			reminder.setText(text);
			reminder.setDetails(details);
			reminder.setId(pk);
			reminder.setDate(date);
			reminder.setHour(hour);
			reminder.setPriority(Priority.fromCode(priority));
			reminder.setDone(done);
			return reminder;
		}
	}
}