delta dDateRange {
	modifies br.unb.cic.reminders.model.Reminder {
		removes date;
		removes hour;
		adds @Column(column = "INITIAL_DATE", type = DBTypes.TEXT) private String dateStart;
		adds @Column(column = "INITIAL_HOUR", type = DBTypes.TEXT) private String hourStart;
		adds @Column(column = "FINAL_DATE", type = DBTypes.TEXT) private String dateFinal;
		adds @Column(column = "FINAL_HOUR", type = DBTypes.TEXT) private String hourFinal;
		removes getDate();
		removes setDate(String date);
		removes getHour();
		removes setHour(String hour);
		adds public String getDateStart() {
			return dateStart;
		}	
		adds public void setDateStart(String dateStart) {
			
			if (dateStart == null) throw new InvalidDateException(dateStart);
			if (!(dateStart == null || dateStart.equals("")) && !checkFormat(dateStart, Patterns.DATE_PATTERN)) {
				throw new InvalidDateException(dateStart);
			}
			this.dateStart = dateStart;
		}
	
		adds public String getHourStart() {
			return hourStart;
		}
		adds public void setHourStart(String hourStart) {
			// We allow reminders to have no hour associated.
			if (!(hourStart == null || hourStart.equals("")) && !checkFormat(hourStart, Patterns.HOUR_PATTERN)) {
				throw new InvalidHourException(hourStart);
			}
			this.hourStart = hourStart;
		}
		
		adds public String getDateFinal() {
			return dateFinal;
		}
		adds public void setDateFinal(String dateFinal) {
			
			if (dateFinal == null) throw new InvalidDateException(dateFinal);
			if (!(dateFinal == null || dateFinal.equals("")) && !checkFormat(dateFinal, Patterns.DATE_PATTERN)) {
				throw new InvalidDateException(dateFinal);
			}
			this.dateFinal = dateFinal;
		}
		adds public String getHourFinal() {
			return hourFinal;
		}
		adds public void setHourFinal(String hourFinal) {
			// We allow reminders to have no hour associated.
			if (!(hourFinal == null || hourFinal.equals("")) && !checkFormat(hourFinal, Patterns.HOUR_PATTERN)) {
				throw new InvalidHourException(hourFinal);
			}
			this.hourFinal = hourFinal;
		}
		removes isValid();
		adds public boolean isValid() {
			return (text != null && dateStart != null && hourStart != null 
					&& dateFinal != null && hourFinal != null);
		}
	}
	modifies br.unb.cic.reminders.model.cp.ReminderContentProvider {
		removes date();
		removes hour();
		adds public static final String dateStart() {
			return DBConstants.REMINDER_INITIAL_DATE_COLUMN;
		}	
		adds public static final String hourStart() {
			return DBConstants.REMINDER_INITIAL_HOUR_COLUMN;
		}		
		adds public static final String dateFinal() {
			return DBConstants.REMINDER_FINAL_DATE_COLUMN;
		}	
		adds public static final String hourFinal() {
			return DBConstants.REMINDER_FINAL_HOUR_COLUMN;
		}
		removes insert(Uri uri, ContentValues values);
		adds @Override public Uri insert(Uri uri, ContentValues values) {
			try {
				Reminder reminder = new Reminder();
				reminder.setText(values.getAsString(text()));
				reminder.setDateStart(values.getAsString(dateStart()));
				reminder.setHourStart(values.getAsString(hourStart()));
				reminder.setDateFinal(values.getAsString(dateFinal()));
				reminder.setHourFinal(values.getAsString(hourFinal()));
				Long id = rdao.saveReminder(reminder);
				getContext().getContentResolver().notifyChange(uri, null);
				return Uri.parse(BASE_PATH + "/" + id);
			}
			catch(DBException e) {
				throw new RuntimeException(e.getLocalizedMessage());
			}
		}
	}
	modifies br.unb.cic.reminders.model.db.DBConstants {
		removes CREATE_TABLE_STATEMENTS;
		adds public static String CREATE_TABLE_STATEMENTS [] = {
			"CREATE TABLE REMINDER ( " + "PK INTEGER PRIMARY KEY AUTOINCREMENT, " +
			"TEXT VARCHAR(50) NOT NULL," + "DETAILS VARCHAR(50) NULL," + "INITIAL_DATE CHAR(10) NOT NULL,"
			+ "INITIAL_HOUR CHAR(5) NULL," + "FINAL_DATE CHAR(10) NOT NULL,"
			+ "FINAL_HOUR CHAR(5) NULL," + "DONE INTEGER NOT NULL);"
		};
		removes SELECT_REMINDERS;
		adds public static final String SELECT_REMINDERS = "SELECT * FROM REMINDER";
		removes REMINDER_DATE_COLUMN;
		removes REMINDER_HOUR_COLUMN;
		adds public static String REMINDER_INITIAL_DATE_COLUMN = "INITIAL_DATE";
		adds public static String REMINDER_INITIAL_HOUR_COLUMN = "INITIAL_HOUR";
		adds public static String REMINDER_FINAL_DATE_COLUMN = "FINAL_DATE";
		adds public static String REMINDER_FINAL_HOUR_COLUMN = "FINAL_HOUR";
	}
	modifies br.unb.cic.reminders.model.db.DefaultReminderDAO {
		removes cursorToReminder(Cursor cursor);
		adds private Reminder cursorToReminder(Cursor cursor) throws DBException {
			Long pk =
					cursor.getLong(cursor.getColumnIndex(DBConstants.REMINDER_PK_COLUMN));
			String text =
					cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_TEXT_COLUMN));
			String details =
					cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_DETAILS_COLUMN));
			String dateStart = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_INITIAL_DATE_COLUMN));
			String hourStart = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_INITIAL_HOUR_COLUMN));
			String dateFinal = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_FINAL_DATE_COLUMN));
			String hourFinal = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_FINAL_HOUR_COLUMN));
			int done =
					cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_DONE_COLUMN));
			Reminder reminder = new Reminder();
			reminder.setText(text);
			reminder.setDetails(details);
			reminder.setDateStart(dateStart);
			reminder.setHourStart(hourStart);
			reminder.setDateFinal(dateFinal);
			reminder.setHourFinal(hourFinal);
			reminder.setId(pk);
			reminder.setDone(done);
			return reminder;
		}
	}
	modifies br.unb.cic.reminders.view.ExternalAddReminderActivity {
		removes setReminderFromIntent();
		adds private void setReminderFromIntent() throws Exception {
			Intent intent = getIntent();
			String action = intent.getAction();
			String type = intent.getType();
	
			// Gets the information from the intent if it is an edit call
			if (action.equals("br.com.positivo.reminders.ADD_REMINDER") && "text/plain".equals(type)) {
				String text = intent.getStringExtra("text");
				String details = intent.getStringExtra("details");
				String dateStart = intent.getStringExtra("dateStart");
				String hourStart = intent.getStringExtra("hourStart");
				String dateFinal = intent.getStringExtra("dateFinal");
				String hourFinal = intent.getStringExtra("hourFinal");
				reminder.setText(text);
				reminder.setDetails(details);
				reminder.setDateStart(dateStart);
				reminder.setHourStart(hourStart);
				reminder.setDateFinal(dateFinal);
				reminder.setHourFinal(hourFinal);
			} else
				reminder = null;	
		}
		removes initializeValues();
		adds @Override protected void initializeValues() {
			if(! reminder.isValid()) return;
			edtReminder.setText(reminder.getText());
			edtDetails.setText(reminder.getDetails());
			updateSpinnerDateHour(spinnerDateStart, reminder.getDateStart());
			updateDateFromString(reminder.getDateStart(), false);
			updateSpinnerDateHour(spinnerTimeStart, reminder.getHourStart());
			updateTimeFromString(reminder.getHourStart(), false);
			updateSpinnerDateHour(spinnerDateStart, reminder.getDateFinal());
			updateDateFromString(reminder.getDateFinal(), true);
			updateSpinnerDateHour(spinnerTimeStart, reminder.getHourFinal());
			updateTimeFromString(reminder.getHourFinal(), true);
		}
	}
}