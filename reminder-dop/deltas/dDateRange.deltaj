delta dDateRange {
	modifies br.unb.cic.reminders.model.Reminder {
		removes date;
		removes hour;
		//#ifdef dateRange
		adds @Column(column = "INITIAL_DATE", type = DBTypes.TEXT) private String dateStart;
		adds @Column(column = "INITIAL_HOUR", type = DBTypes.TEXT) private String hourStart;
		adds @Column(column = "FINAL_DATE", type = DBTypes.TEXT) private String dateFinal;
		adds @Column(column = "FINAL_HOUR", type = DBTypes.TEXT) private String hourFinal;
		//#endif
		removes getDate();
		removes setDate(String date);
		removes getHour();
		removes setHour(String hour);
		//#ifdef dateRange
		adds public String getDateStart() {
			return dateStart;
		}
		adds public void setDateStart(String dateStart) {

			if (dateStart == null) throw new InvalidDateException(dateStart);
			if (!(dateStart == null || dateStart.equals("")) && !checkFormat(dateStart, Patterns.DATE_PATTERN)) {
				throw new InvalidDateException(dateStart);
			}
			this.dateStart = dateStart;
		}
		adds public String getHourStart() {
			return hourStart;
		}
		adds public void setHourStart(String hourStart) {
			if (!(hourStart == null || hourStart.equals("")) && !checkFormat(hourStart, Patterns.HOUR_PATTERN)) {
				throw new InvalidHourException(hourStart);
			}
			this.hourStart = hourStart;
		}
		adds public String getDateFinal() {
			return dateFinal;
		}
		adds public void setDateFinal(String dateFinal) {

			if (dateFinal == null) throw new InvalidDateException(dateFinal);
			if (!(dateFinal == null || dateFinal.equals("")) && !checkFormat(dateFinal, Patterns.DATE_PATTERN)) {
				throw new InvalidDateException(dateFinal);
			}
			this.dateFinal = dateFinal;
		}
		adds public String getHourFinal() {
			return hourFinal;
		}
		adds public void setHourFinal(String hourFinal) {
			if (!(hourFinal == null || hourFinal.equals("")) && !checkFormat(hourFinal, Patterns.HOUR_PATTERN)) {
				throw new InvalidHourException(hourFinal);
			}
			this.hourFinal = hourFinal;
		}
		//#endif
		removes isValid();
		//#ifdef dateRange
		adds public boolean isValid() {
			return (text != null && dateStart != null && hourStart != null
					&& dateFinal != null && hourFinal != null);
		}
		//#endif
	}
	modifies br.unb.cic.reminders.model.cp.ReminderContentProvider {
		removes date();
		removes hour();
		//#ifdef dateRange
		adds public static final String dateStart() {
			return DBConstants.REMINDER_INITIAL_DATE_COLUMN;
		}
		adds public static final String hourStart() {
			return DBConstants.REMINDER_INITIAL_HOUR_COLUMN;
		}
		adds public static final String dateFinal() {
			return DBConstants.REMINDER_FINAL_DATE_COLUMN;
		}
		adds public static final String hourFinal() {
			return DBConstants.REMINDER_FINAL_HOUR_COLUMN;
		}
		//#endif
		removes createReminderInsert(ContentValues values);
		//#ifdef dateRange
		adds private Reminder createReminderInsert(ContentValues values) throws DBException {
			Reminder reminder = new Reminder();
			reminder.setDateStart(values.getAsString(dateStart()));
			reminder.setHourStart(values.getAsString(hourStart()));
			reminder.setDateFinal(values.getAsString(dateFinal()));
			reminder.setHourFinal(values.getAsString(hourFinal()));
			return reminder;
		}
		//#endif
	}
	modifies br.unb.cic.reminders.model.db.DBConstants {
		removes tableStatement();
		//#ifdef dateRange
		adds private static String tableStatement() {
			return "INITIAL_DATE CHAR(10) NOT NULL,"
				+ "INITIAL_HOUR CHAR(5) NULL," + "FINAL_DATE CHAR(10) NOT NULL,"
				+ "FINAL_HOUR CHAR(5) NULL,";
		}
		//#endif
		removes REMINDER_DATE_COLUMN;
		removes REMINDER_HOUR_COLUMN;
		//#ifdef dateRange
		adds public static String REMINDER_INITIAL_DATE_COLUMN = "INITIAL_DATE";
		adds public static String REMINDER_INITIAL_HOUR_COLUMN = "INITIAL_HOUR";
		adds public static String REMINDER_FINAL_DATE_COLUMN = "FINAL_DATE";
		adds public static String REMINDER_FINAL_HOUR_COLUMN = "FINAL_HOUR";
		//#endif
	}
	modifies br.unb.cic.reminders.model.db.DefaultReminderDAO {
		removes  createReminderCursor(Cursor cursor);
		//#ifdef dateRange
		adds private Reminder createReminderCursor(Cursor cursor) throws DBException {
			Reminder reminder = new Reminder();
			String dateStart = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_INITIAL_DATE_COLUMN));
			String hourStart = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_INITIAL_HOUR_COLUMN));
			String dateFinal = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_FINAL_DATE_COLUMN));
			String hourFinal = cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_FINAL_HOUR_COLUMN));
			reminder.setDateStart(dateStart);
			reminder.setHourStart(hourStart);
			reminder.setDateFinal(dateFinal);
			reminder.setHourFinal(hourFinal);
			return reminder;
		}
		//#endif
	}
	modifies br.unb.cic.reminders.view.ExternalAddReminderActivity {
		removes reminderFromIntent(Intent intent);
		//#ifdef dateRange
		adds private void reminderFromIntent(Intent intent) throws Exception {
			String dateStart = intent.getStringExtra("dateStart");
			String hourStart = intent.getStringExtra("hourStart");
			String dateFinal = intent.getStringExtra("dateFinal");
			String hourFinal = intent.getStringExtra("hourFinal");
			reminder.setDateStart(dateStart);
			reminder.setHourStart(hourStart);
			reminder.setDateFinal(dateFinal);
			reminder.setHourFinal(hourFinal);
		}
		//#endif
		removes initialize();
		//#ifdef dateRange
		adds private void initialize() throws Exception {
			updateSpinnerDateHour(spinnerDateStart, reminder.getDateStart());
			updateDateFromString(reminder.getDateStart(), false);
			updateSpinnerDateHour(spinnerTimeStart, reminder.getHourStart());
			updateTimeFromString(reminder.getHourStart(), false);
			updateSpinnerDateHour(spinnerDateStart, reminder.getDateFinal());
			updateDateFromString(reminder.getDateFinal(), true);
			updateSpinnerDateHour(spinnerTimeStart, reminder.getHourFinal());
			updateTimeFromString(reminder.getHourFinal(), true);
		}
		//#endif
	}
	modifies br.unb.cic.reminders.view.ReminderActivity {
		removes date;
		removes time;
		//#ifdef dateRange
		adds protected Calendar dateStart, timeStart, dateFinal, timeFinal;
		//#endif
		removes spinnerDate;
		removes spinnerTime;
		//#ifdef dateRange
		adds protected Spinner spinnerDateStart, spinnerTimeStart, spinnerDateFinal, spinnerTimeFinal;
		//#endif
		removes initializeFields();
		removes setValuesOnReminder();
		removes addListenerToSpinnerDate();
		removes addListenerToSpinnerTime();
		removes  dateToString();
		removes timeToString();
		removes updateDateFromString(String sDate);
		removes updateTimeFromString(String sTime);
		removes getSpinnerDate();
		removes getSpinnerTime();
		//#ifdef dateRange
		adds private void initializeFields() {
			btnSave = (Button) findViewById(R.id.btnSave);
			btnCancel = (Button) findViewById(R.id.btnCancel);
			edtReminder = (EditText) findViewById(R.id.edtReminder);
			edtDetails = (EditText) findViewById(R.id.edtDetails);
			spinnerDateStart = getSpinnerDateStart();
			spinnerTimeStart = getSpinnerTimeStart();
			spinnerDateFinal = getSpinnerDateFinal();
			spinnerTimeFinal = getSpinnerTimeFinal();
		}
		adds private void setValuesOnReminder() throws Exception {
			reminder.setDateStart(dateToString(dateStart));
			reminder.setHourStart(timeToString(timeStart));
			reminder.setDateFinal(dateToString(dateFinal));
			reminder.setHourFinal(timeToString(timeFinal));
		}
		adds private void addListenerToSpinnerDate() {

			spinnerDateStart.setOnTouchListener(new View.OnTouchListener() {
				public boolean onTouch(View v, MotionEvent event) {
					spinnerDateStart = getSpinnerDateStart();
					return false;
				}
			});

			spinnerDateStart.setOnKeyListener(new View.OnKeyListener() {
				public boolean onKey(View v, int keyCode, KeyEvent event) {
					spinnerDateStart = getSpinnerDateStart();
					return false;
				}
			});

			spinnerDateStart.setOnItemSelectedListener(new OnItemSelectedListener() {

				public void onItemSelected(AdapterView<? extends Object> parent, View view, int pos, long id) {

					switch (pos) {
					case 0:
						dateStart = null;
						break;
					case 1:
						if (dateStart == null)
							dateStart = Calendar.getInstance();
						DialogFragment newFragment = new DatePickerDialogFragment(dateStart, spinnerDateStart);
						newFragment.show(getFragmentManager(), "datePicker");
						break;
					default:
					}
				}

				public void onNothingSelected(AdapterView<? extends Object> arg0) {
				}

			});

			spinnerDateFinal.setOnTouchListener(new View.OnTouchListener() {
				public boolean onTouch(View v, MotionEvent event) {
					spinnerDateFinal = getSpinnerDateFinal();
					return false;
				}
			});

			spinnerDateFinal.setOnKeyListener(new View.OnKeyListener() {
				public boolean onKey(View v, int keyCode, KeyEvent event) {
					spinnerDateFinal = getSpinnerDateFinal();
					return false;
				}
			});

			spinnerDateFinal.setOnItemSelectedListener(new OnItemSelectedListener() {

				public void onItemSelected(AdapterView<? extends Object> parent, View view, int pos, long id) {

					switch (pos) {
					case 0:
						dateFinal = null;
						break;
					case 1:
						if (dateFinal == null)
							dateFinal = Calendar.getInstance();
						DialogFragment newFragment = new DatePickerDialogFragment(dateFinal, spinnerDateFinal);
						newFragment.show(getFragmentManager(), "datePicker");
						break;
					default:
					}
				}

				public void onNothingSelected(AdapterView<? extends Object> arg0) {
				}

			});
		}
		adds private void addListenerToSpinnerTime() {

			spinnerTimeStart.setOnTouchListener(new View.OnTouchListener() {
				public boolean onTouch(View v, MotionEvent event) {
					spinnerTimeStart = getSpinnerTimeStart();
					return false;
				}
			});

			spinnerTimeStart.setOnKeyListener(new View.OnKeyListener() {
				public boolean onKey(View v, int keyCode, KeyEvent event) {
					spinnerTimeStart = getSpinnerTimeStart();
					return false;
				}
			});

			spinnerTimeStart.setOnItemSelectedListener(new OnItemSelectedListener() {

				public void onItemSelected(AdapterView<? extends Object> parent, View view, int pos, long id) {

					switch (pos) {
					case 0:
						timeStart = null;
						break;
					case 1:
						if (timeStart == null)
							timeStart = Calendar.getInstance();
						DialogFragment newFragment = new TimePickerDialogFragment(timeStart, spinnerTimeStart);
						newFragment.show(getFragmentManager(), "timePicker");
						break;
					default:
					}
				}

				public void onNothingSelected(AdapterView<? extends Object> arg0) {
				}
			});

			spinnerTimeFinal.setOnTouchListener(new View.OnTouchListener() {
				public boolean onTouch(View v, MotionEvent event) {
					spinnerTimeFinal = getSpinnerTimeFinal();
					return false;
				}
			});

			spinnerTimeFinal.setOnKeyListener(new View.OnKeyListener() {
				public boolean onKey(View v, int keyCode, KeyEvent event) {
					spinnerTimeFinal = getSpinnerTimeFinal();
					return false;
				}
			});

			spinnerTimeFinal.setOnItemSelectedListener(new OnItemSelectedListener() {

				public void onItemSelected(AdapterView<? extends Object> parent, View view, int pos, long id) {

					switch (pos) {
					case 0:
						timeFinal = null;
						break;
					case 1:
						if (timeFinal == null)
							timeFinal = Calendar.getInstance();
						DialogFragment newFragment = new TimePickerDialogFragment(timeFinal, spinnerTimeFinal);
						newFragment.show(getFragmentManager(), "timePicker");
						break;
					default:
					}
				}

				public void onNothingSelected(AdapterView<? extends Object> arg0) {
				}
			});

		}
		adds private String dateToString(Calendar date) {
			if (date == null)
				return null;
			String sDate;
			sDate = Integer.toString(date.get(Calendar.MONTH) + 1);
			if (date.get(Calendar.MONTH) + 1 < 10)
				sDate = "0" + sDate;
			sDate = Integer.toString(date.get(Calendar.DAY_OF_MONTH)) + "-" + sDate;
			if (date.get(Calendar.DAY_OF_MONTH) < 10)
				sDate = "0" + sDate;
			sDate += "-" + Integer.toString(date.get(Calendar.YEAR));
			return sDate;
		}
		adds private String timeToString(Calendar time) {
			if (time == null)
				return null;
			String sTime;
			sTime = Integer.toString(time.get(Calendar.MINUTE));
			if (time.get(Calendar.MINUTE) < 10)
				sTime = "0" + sTime;
			sTime = Integer.toString(time.get(Calendar.HOUR_OF_DAY)) + ":" + sTime;
			if (time.get(Calendar.HOUR_OF_DAY) < 10)
				sTime = "0" + sTime;
			return sTime;
		}
		adds protected void updateDateFromString(String sDate, boolean isFinal) {
			if (sDate == null || sDate.equals("")) {
				if (isFinal) dateFinal = null;
				else dateStart = null;
				return;
			}
			char sDay[] = { sDate.charAt(0), sDate.charAt(1) };
			int day = Integer.parseInt(new String(sDay), 10);
			char sMonth[] = { sDate.charAt(3), sDate.charAt(4) };
			int month = Integer.parseInt(new String(sMonth), 10);
			char sYear[] = { sDate.charAt(6), sDate.charAt(7), sDate.charAt(8), sDate.charAt(9) };
			int year = Integer.parseInt(new String(sYear), 10);
			if (dateFinal == null)
				dateFinal = Calendar.getInstance();
			if (dateStart == null)
				dateStart = Calendar.getInstance();
			if (isFinal)
				dateFinal.set(year, month - 1, day);
			else
				dateStart.set(year, month - 1, day);
		}
		adds protected void updateTimeFromString(String sTime, boolean isFinal) {
			if (sTime == null || sTime.equals("")) {
				if (isFinal) timeFinal = null;
				else timeStart = null;
				return;
			}
			char sHour[] = { sTime.charAt(0), sTime.charAt(1) };
			int hour = Integer.parseInt(new String(sHour), 10);
			char sMinute[] = { sTime.charAt(3), sTime.charAt(4) };
			int minute = Integer.parseInt(new String(sMinute), 10);
			if (timeStart == null)
				timeStart = Calendar.getInstance();
			if (timeFinal == null)
				timeFinal = Calendar.getInstance();
			if (isFinal) {
				timeFinal.set(Calendar.MINUTE, minute);
				timeFinal.set(Calendar.HOUR_OF_DAY, hour);
			} else {
				timeStart.set(Calendar.MINUTE, minute);
				timeStart.set(Calendar.HOUR_OF_DAY, hour);
			}

		}
		adds private Spinner getSpinnerDateStart() {
			Spinner spinner = (Spinner) findViewById(R.id.spinnerDateStart);

			SpinnerAdapterGenerator<String> adapterDateGenerator = new SpinnerAdapterGenerator<String>();

			List<String> items = new ArrayList<String>();
			items.add("No date");
			items.add("+ Select");

			spinner.setAdapter(adapterDateGenerator.getSpinnerAdapter(items, this));

			return spinner;
		}
		adds private Spinner getSpinnerTimeStart() {
			Spinner spinner = (Spinner) findViewById(R.id.spinnerTimeStart);

			SpinnerAdapterGenerator<String> adapterTimeGenerator = new SpinnerAdapterGenerator<String>();

			List<String> items = new ArrayList<String>();
			items.add("No time");
			items.add("+ Select");

			spinner.setAdapter(adapterTimeGenerator.getSpinnerAdapter(items, this));

			return spinner;
		}
		adds private Spinner getSpinnerDateFinal() {
			Spinner spinner = (Spinner) findViewById(R.id.spinnerDateFinal);

			SpinnerAdapterGenerator<String> adapterDateGenerator = new SpinnerAdapterGenerator<String>();

			List<String> items = new ArrayList<String>();
			items.add("No date");
			items.add("+ Select");

			spinner.setAdapter(adapterDateGenerator.getSpinnerAdapter(items, this));

			return spinner;
		}
		adds private Spinner getSpinnerTimeFinal() {
			Spinner spinner = (Spinner) findViewById(R.id.spinnerTimeFinal);

			SpinnerAdapterGenerator<String> adapterTimeGenerator = new SpinnerAdapterGenerator<String>();

			List<String> items = new ArrayList<String>();
			items.add("No time");
			items.add("+ Select");

			spinner.setAdapter(adapterTimeGenerator.getSpinnerAdapter(items, this));

			return spinner;
		}
		//#endif
	}
	modifies br.unb.cic.reminders.view.ReminderAddActivity {
		removes edtDate;
		removes edtHour;
		//#ifdef dateRange
		adds private EditText edtDateStart, edtHourStart, edtDateFinal, edtHourFinal;
		//#endif
		removes createReminderAux();
		removes createReminderExisting(Intent intent);
		removes createReminderIntent(Intent intent);
		removes updateFieldsFromReminder(Reminder reminder);
		//#ifdef dateRange
		adds private Reminder createReminderAux() {
			Reminder reminder = new Reminder();
			reminder.setDateStart(edtDateStart.getText().toString());
			reminder.setHourStart(edtHourStart.getText().toString());
			reminder.setDateFinal(edtDateFinal.getText().toString());
			reminder.setHourFinal(edtHourFinal.getText().toString());
			return reminder;
		}
		adds private Reminder createReminderExisting(Intent intent) {
			Reminder reminder = new Reminder();
			String dateStart = intent.getStringExtra("dateStart");
			String hourStart = intent.getStringExtra("hourStart");
			String dateFinal = intent.getStringExtra("dateFinal");
			String hourFinal = intent.getStringExtra("hourFinal");
			reminder.setDateStart(dateStart);
			reminder.setHourStart(hourStart);
			reminder.setDateFinal(dateFinal);
			reminder.setHourFinal(hourFinal);
			return reminder;
		}
		adds private Reminder createReminderIntent(Intent intent) {
			Reminder reminder = new Reminder();
			String dateStart = intent.getStringExtra("dateStart");
			String hourStart = intent.getStringExtra("hourStart");
			String dateFinal = intent.getStringExtra("dateFinal");
			String hourFinal = intent.getStringExtra("hourFinal");
			reminder.setDateStart(dateStart);
			reminder.setHourStart(hourStart);
			reminder.setDateFinal(dateFinal);
			reminder.setHourFinal(hourFinal);
			return reminder;
		}
		adds private void updateFieldsFromReminder(Reminder reminder) throws Exception {
			edtReminder.setText(reminder.getText());
			edtDetails.setText(reminder.getDetails());
			edtDateStart.setText(reminder.getDateStart());
			edtHourStart.setText(reminder.getHourStart());
			edtDateFinal.setText(reminder.getDateFinal());
			edtHourFinal.setText(reminder.getHourFinal());
		}
		//#endif
	}
	modifies br.unb.cic.reminders.view.ReminderArrayAdapter {
		removes getDateFirst(int position);
		removes getDateSecond(int position);
		removes getDatesHour(int position);
		//#ifdef dateRange
		adds private String getDateFirst(int position) {

			if (getItem(position).getDateFinal() == null) {
				return "";
			}

			String months[] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
			String week[] = { "", "SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT" };

			Calendar today = Calendar.getInstance();
			GregorianCalendar thatDay = new GregorianCalendar();
			thatDay.set(Integer.parseInt(getItem(position).getDateFinal().substring(6, 10)),
					Integer.parseInt(getItem(position).getDateFinal().substring(3, 5)) - 1, 
					Integer.parseInt(getItem(position).getDateFinal().substring(0, 2)));

			switch (rowType) {
			case LATE:
				long diff = today.getTimeInMillis() - thatDay.getTimeInMillis();
				long days = diff / (24*60*60*1000);
				if (days == 1)
						return "Yesterday";
				else
					return days + " days ago";

			case TODAY:
				return getDatesHour(position);

			case NEXT_DAYS:
				diff = thatDay.getTimeInMillis() - today.getTimeInMillis();
				days = diff / (24*60*60*1000);

				if (days == 1) {
					return getDatesHour(position);
				} else if (days < 6) {
					return week[thatDay.get(Calendar.DAY_OF_WEEK)];
				} else {
					return thatDay.get(Calendar.DAY_OF_MONTH) + " " + months[thatDay.get(Calendar.MONTH)];
				}


			default:
				break;
			}

			return getItem(position).getDateFinal();
		}
		adds private String getDateSecond(int position) {

			switch (rowType) {
			case LATE:
				return getDatesHour(position);
			case TODAY:
				return "today";
			case NEXT_DAYS:
				Calendar today = Calendar.getInstance();
				GregorianCalendar thatDay = new GregorianCalendar();
				thatDay.set(Integer.parseInt(getItem(position).getDateFinal().substring(6, 10)), 
						Integer.parseInt(getItem(position).getDateFinal().substring(3, 5)) - 1, 
						Integer.parseInt(getItem(position).getDateFinal().substring(0, 2)));

				long diff = thatDay.getTimeInMillis() - today.getTimeInMillis();
				long days = diff / (24*60*60*1000);

				if (days == 1)
					return "tomorrow";
				else
					return getDatesHour(position);
			default:
				break;
			}

			return getItem(position).getHourFinal();
		}
		adds private String getDatesHour(int position) {

			if (getItem(position).getHourFinal() == null) {
				return "";
			}

			if (getItem(position).getHourFinal().substring(3, 5) != "00")
				return getItem(position).getHourFinal().substring(0, 2) + "h" + getItem(position).getHourFinal().substring(3, 5);
			else
				return getItem(position).getHourFinal().substring(0, 2) + "h";
		}
		//#endif
	}
	modifies br.unb.cic.reminders.view.ReminderListFragment {
		removes lvReminderNoDate;
		removes createUI();
		removes editIntent(Reminder reminder);
		removes updateListView(ReminderFilter filter);
		//#ifdef dateRange
		adds public void createUI() {
			lvReminderLate = (ListView) view.findViewById(R.id.lvRemindersLate);
			lvReminderToday = (ListView) view.findViewById(R.id.lvRemindersToday);
			lvReminderNextDays = (ListView) view.findViewById(R.id.lvRemindersNextDays);
			updateListView(null);
			registerForContextMenu(lvReminderLate);
			registerForContextMenu(lvReminderToday);
			registerForContextMenu(lvReminderNextDays);
		}
		adds private Intent editIntent(Reminder reminder) {
			Intent editIntent = new Intent(getActivity().getApplicationContext(), EditReminderActivity.class);
			editIntent.putExtra("dateStart", reminder.getDateStart());
			editIntent.putExtra("hourStart", reminder.getHourStart());
			editIntent.putExtra("dateFinal", reminder.getDateFinal());
			editIntent.putExtra("hourFinal", reminder.getHourFinal());
			return editIntent;
		}
		adds public void updateListView(ReminderFilter filter) {
			if (filter == null)
				filter = new AllRemindersFilter(getActivity());
			adapter = new ReminderArrayAdapter(getActivity().getApplicationContext(), filter.getReminderList());

			ReminderArrayAdapter adapterLate, adapterToday, adapterNextDays;

			Reminder r = new Reminder();
			List<Reminder> remindersLate = new ArrayList<Reminder>();
			List<Reminder> remindersToday = new ArrayList<Reminder>();
			List<Reminder> remindersNextDays = new ArrayList<Reminder>();

			for (int i = 0; i < adapter.getCount(); ++i) {
				r = adapter.getItem(i);
				if (r.getDateFinal() != null && r.getDateStart() != null) {
					String dayStart = r.getDateStart().substring(0, 2);
					String monthStart = r.getDateStart().substring(3, 5);
					String yearStart = r.getDateStart().substring(6, 10);
					String dayFinal = r.getDateFinal().substring(0, 2);
					String monthFinal = r.getDateFinal().substring(3, 5);
					String yearFinal = r.getDateFinal().substring(6, 10);

					Calendar cal = Calendar.getInstance();
					GregorianCalendar gc = new GregorianCalendar();
					GregorianCalendar gc2 = new GregorianCalendar();
					if (r.getHourFinal() != null) {
						String hour = r.getHourFinal().substring(0, 2);
						String min = r.getHourFinal().substring(3, 5);
						gc.set(Integer.parseInt(yearFinal), Integer.parseInt(monthFinal) - 1, Integer.parseInt(dayFinal),
								Integer.parseInt(hour), Integer.parseInt(min));
					} else {
						gc.set(Integer.parseInt(yearFinal), Integer.parseInt(monthFinal) - 1, Integer.parseInt(dayFinal));
					}
					if (r.getHourStart() != null) {
						String hour = r.getHourStart().substring(0, 2);
						String min = r.getHourStart().substring(3, 5);
						gc2.set(Integer.parseInt(yearStart), Integer.parseInt(monthStart) - 1, Integer.parseInt(dayStart),
								Integer.parseInt(hour), Integer.parseInt(min));
					} else {
						gc2.set(Integer.parseInt(yearStart), Integer.parseInt(monthStart) - 1, Integer.parseInt(dayStart));
					}
					if (gc.before(cal))
						remindersLate.add(r);
					else if (gc.after(cal) && gc2.before(cal))
						remindersToday.add(r);
					else
						remindersNextDays.add(r);
				}
			}

			adapterLate = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersLate,
					Color.rgb(0xED, 0x1C, 0x24), ReminderArrayAdapter.LATE);
			adapterToday = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersToday,
					Color.rgb(0x33, 0xB5, 0xE5), ReminderArrayAdapter.TODAY);
			adapterNextDays = new ReminderArrayAdapter(getActivity().getApplicationContext(), remindersNextDays,
					Color.rgb(0x99, 0x99, 0x99), ReminderArrayAdapter.NEXT_DAYS);

			lvReminderLate.setAdapter(adapterLate);
			Utility.setListViewHeightBasedOnChildren(lvReminderLate);
			lvReminderToday.setAdapter(adapterToday);
			Utility.setListViewHeightBasedOnChildren(lvReminderToday);
			lvReminderNextDays.setAdapter(adapterNextDays);
			Utility.setListViewHeightBasedOnChildren(lvReminderNextDays);
		}
		//#endif
	}
	modifies br.unb.cic.reminders.view.EditReminderActivity {
		removes initializeValues(Intent intent);
		//#ifdef dateRange
		adds private void initializeValues(Intent intent) throws Exception {
			String dateStart = intent.getStringExtra("dateStart");
			String hourStart = intent.getStringExtra("hourStart");
			String dateFinal = intent.getStringExtra("dateFinal");
			String hourFinal = intent.getStringExtra("hourFinal");
			updateSpinnerDateHour(spinnerDateStart, dateStart);
			updateDateFromString(dateStart, false);
			updateSpinnerDateHour(spinnerTimeStart, hourStart);
			updateTimeFromString(hourStart, false);
			updateSpinnerDateHour(spinnerDateFinal, dateFinal);
			updateDateFromString(dateFinal, true);
			updateSpinnerDateHour(spinnerTimeFinal, hourFinal);
			updateTimeFromString(hourFinal, false);
		}
		//#endif
	}
}
