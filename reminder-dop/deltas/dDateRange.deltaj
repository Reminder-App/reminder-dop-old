delta dDateRange {
	modifies br.unb.cic.reminders.model.Reminder {
		removes date;
		removes hour;
		adds @Column(column = "INITIAL_DATE", type = DBTypes.TEXT) private String dateStart;
		adds @Column(column = "INITIAL_HOUR", type = DBTypes.TEXT) private String hourStart;
		adds @Column(column = "FINAL_DATE", type = DBTypes.TEXT) private String dateFinal;
		adds @Column(column = "FINAL_HOUR", type = DBTypes.TEXT) private String hourFinal;
		removes getDate();
		removes setDate(String date);
		removes getHour();
		removes setHour(String hour);
		adds public String getDateStart() {
			return dateStart;
		}	
		adds public void setDateStart(String dateStart) {
			
			if (dateStart == null) throw new InvalidDateException(dateStart);
			if (!(dateStart == null || dateStart.equals("")) && !checkFormat(dateStart, Patterns.DATE_PATTERN)) {
				throw new InvalidDateException(dateStart);
			}
			this.dateStart = dateStart;
		}
	
		adds public String getHourStart() {
			return hourStart;
		}
		adds public void setHourStart(String hourStart) {
			// We allow reminders to have no hour associated.
			if (!(hourStart == null || hourStart.equals("")) && !checkFormat(hourStart, Patterns.HOUR_PATTERN)) {
				throw new InvalidHourException(hourStart);
			}
			this.hourStart = hourStart;
		}
		
		adds public String getDateFinal() {
			return dateFinal;
		}
		adds public void setDateFinal(String dateFinal) {
			
			if (dateFinal == null) throw new InvalidDateException(dateFinal);
			if (!(dateFinal == null || dateFinal.equals("")) && !checkFormat(dateFinal, Patterns.DATE_PATTERN)) {
				throw new InvalidDateException(dateFinal);
			}
			this.dateFinal = dateFinal;
		}
		adds public String getHourFinal() {
			return hourFinal;
		}
		adds public void setHourFinal(String hourFinal) {
			// We allow reminders to have no hour associated.
			if (!(hourFinal == null || hourFinal.equals("")) && !checkFormat(hourFinal, Patterns.HOUR_PATTERN)) {
				throw new InvalidHourException(hourFinal);
			}
			this.hourFinal = hourFinal;
		}
		removes isValid();
		adds public boolean isValid() {
			return (text != null && dateStart != null && hourStart != null 
					&& dateFinal != null && hourFinal != null);
		}
	}
	modifies br.unb.cic.reminders.model.cp.ReminderContentProvider {
		removes date();
		removes hour();
		adds public static final String dateStart() {
			return DBConstants.REMINDER_INITIAL_DATE_COLUMN;
		}	
		adds public static final String hourStart() {
			return DBConstants.REMINDER_INITIAL_HOUR_COLUMN;
		}		
		adds public static final String dateFinal() {
			return DBConstants.REMINDER_FINAL_DATE_COLUMN;
		}	
		adds public static final String hourFinal() {
			return DBConstants.REMINDER_FINAL_HOUR_COLUMN;
		}
		removes insert(Uri uri, ContentValues values);
		adds @Override public Uri insert(Uri uri, ContentValues values) {
			try {
				Reminder reminder = new Reminder();
				reminder.setText(values.getAsString(text()));
				reminder.setDateStart(values.getAsString(dateStart()));
				reminder.setHourStart(values.getAsString(hourStart()));
				reminder.setDateFinal(values.getAsString(dateFinal()));
				reminder.setHourFinal(values.getAsString(hourFinal()));
				Long id = rdao.saveReminder(reminder);
				getContext().getContentResolver().notifyChange(uri, null);
				return Uri.parse(BASE_PATH + "/" + id);
			}
			catch(DBException e) {
				throw new RuntimeException(e.getLocalizedMessage());
			}
		}
	}
}