delta dCategory {
	modifies br.unb.cic.reminders.model.db.DBConstants {
		removes DROP_TABLE_STATEMENTS;
		adds public static String DROP_TABLE_STATEMENTS[] = { "DROP TABLE IF EXISTS REMINDER", "DROP TABLE IF EXISTS CATEGORY" };
		
		removes CREATE_TABLE_STATEMENTS;
		adds public static String CREATE_TABLE_STATEMENTS[] = { "CREATE TABLE CATEGORY("
			+ "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "NAME VARCHAR(50) NOT NULL, " + "LOCKED INT NOT NULL);",

			"CREATE TABLE REMINDER ( " + "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "TEXT VARCHAR(50) NOT NULL,"
					+ "DETAILS VARCHAR(50) NULL,"
					+ "FK_CATEGORY INTEGER NOT NULL REFERENCES CATEGORY ON DELETE CASCADE," + "DATE CHAR(10) NULL,"
					+ "HOUR CHAR(5) NULL," + "DONE INTEGER NOT NULL);", };
		
		adds public static final String SELECT_CATEGORIES = "SELECT PK, NAME FROM CATEGORY";
		adds public static final String SELECT_CATEGORY_BY_NAME = "SELECT PK, NAME FROM CATEGORY WHERE NAME = ?";
		adds public static final String SELECT_CATEGORY_BY_ID = "SELECT PK, NAME FROM CATEGORY WHERE PK = ?";
		
		removes SELECT_REMINDERS;
		adds public static final String SELECT_REMINDERS = "SELECT PK, TEXT, DETAILS, FK_CATEGORY, DATE, HOUR, DONE FROM REMINDER";
		adds public static final String SELECT_REMINDERS_BY_CATEGORY = "SELECT PK, TEXT, DETAILS, FK_CATEGORY, DATE, HOUR, DONE FROM REMINDER WHERE FK_CATEGORY = ?";
		adds public static String DELETE_CATEGORIES = "DELETE FROM CATEGORY WHERE PK = ?";
		
		adds public static final String PREDEFINED_CATEGORIES[] = { "INSERT INTO CATEGORY VALUES (NULL,'Faculdade',1);",
			"INSERT INTO CATEGORY VALUES (NULL,'Trabalho',1);", "INSERT INTO CATEGORY VALUES (NULL,'Pessoal',1);" };

		adds public static String CATEGORY_TABLE = "CATEGORY";
		adds public static String CATEGORY_PK_COLUMN = "PK";
		adds public static String CATEGORY_NAME_COLUMN = "NAME";
		adds public static String CATEGORY_LOCKED_COLUMN = "LOCKED";
		
		adds public static String REMINDER_FK_CATEGORY_COLUMN = "FK_CATEGORY";
	}
	modifies br.unb.cic.framework.persistence.GenericDAO {
		adds import br.unb.cic.reminders.model.db.DefaultCategoryDAO;
		
		removes persist(T entity);
		adds protected Long persist(T entity) throws DBInvalidEntityException, DBException {
			try {
				db = dbHelper.getWritableDatabase();
				ContentValues values = new ContentValues();
				if(! entity.getClass().isAnnotationPresent(Entity.class)) {
					throw new DBInvalidEntityException(entity);
				}
				String tableName = entity.getClass().getAnnotation(Entity.class).table();
				boolean update = false;
				String updateWhereClause = null;
				for(Field f : entity.getClass().getDeclaredFields()) {
					if(f.isAnnotationPresent(Column.class)) {
						String column = f.getAnnotation(Column.class).column();
						boolean pk = f.getAnnotation(Column.class).primaryKey();
						String methodName = getMethod(f.getName());
						Class args [] = {
						};
						Method m = entity.getClass().getDeclaredMethod(methodName, args);
						Object value = m.invoke(entity, args);
						if(f.isAnnotationPresent(ForeignKey.class)) {
							String fk = f.getAnnotation(ForeignKey.class).mappedBy();
							methodName = getMethod(fk);
							m = value.getClass().getDeclaredMethod(methodName, args);
							value = m.invoke(value, args);
						}
						if(value != null) {
							values.put(column, value.toString());
						}
						else {
							values.putNull(column);
						}
						if(pk && value != null) {
							update = true;
							updateWhereClause = column + " = " + value.toString();
						}
					}
				}
				Long id = null;
				db.beginTransaction();
				if(! update) {
					id = db.insert(tableName, null, values);
				}
				else {
					db.update(tableName, values, updateWhereClause, null);
				}
				db.setTransactionSuccessful();
				return id;
			}
			catch(Exception e) {
				e.printStackTrace();
				Log.e(DefaultCategoryDAO.class.getCanonicalName(), e.getLocalizedMessage());
				throw new DBException();
			}
			finally {
				if(db.inTransaction()) {
					db.endTransaction();
				}
				db.close();
				dbHelper.close();
			}
		}
				
	}
	adds {
		package br.unb.cic.reminders.controller;
		
		import android.content.Context;
		import br.unb.cic.reminders.model.Category;
		import br.unb.cic.reminders.model.Reminder;
		
		public class CategoryFilter extends ReminderFilter {
		
			private Category category;
		
			public CategoryFilter(Category category, Context context) {
				super(context);
				this.category = category;
			}
		
			@Override
			protected boolean selectReminder(Reminder r) {
				return r.getCategory().getName().equals(category.getName());
			}
		
			public Category getCategory() {
				return category;
			}
		
			@Override
			public String getName() {
				return category.getName();
			}
		
		}
	}
	modifies br.unb.cic.reminders.controller.Controller {
		adds import br.unb.cic.reminders.model.Category;
		adds public List<Category> listCategories() throws Exception {
			try {
				return DBFactory.factory(context).createCategoryDAO().listCategories();
			} catch (DBException e) {
				// TODO: we need to define what to do in these situations.
				throw e;
			}
		}
		adds public Category findCategory(Long id) throws Exception {
			return DBFactory.factory(context).createCategoryDAO().findCategoryById(id);
		}
		adds public Category findCategory(String name) throws Exception {
			return DBFactory.factory(context).createCategoryDAO().findCategory(name);
		}
		adds public List<Reminder> listRemindersByCategory(Category category) throws Exception {
			try {
				return DBFactory.factory(context).createReminderDAO().listRemindersByCategory(category);
			} catch (DBException e) {
				// TODO: we need to define what to do in these situations.
				throw e;
			}
		}
		adds public Category getCategory(String name) throws DBException {
			try {
				List<Category> categories = DBFactory.factory(context).createCategoryDAO().listCategories();
				for (Category c : categories) {
					if (c.getName().equals(name))
						return c;
				}
				return null;
			} catch (DBException e) {
				// TODO: we need to define what to do in these situations.
				throw e;
			}
		}
	}
	modifies br.unb.cic.reminders.model.cp.ReminderContentProvider {
		adds import br.unb.cic.reminders.model.Category;
		adds import br.unb.cic.reminders.model.db.CategoryDAO;
		adds public static final String category() {
			return DBConstants.CATEGORY_NAME_COLUMN;
		}
		adds private CategoryDAO cdao;
		modifies onCreate() {
			cdao = DefaultDBFactory.factory(getContext()).createCategoryDAO();
			rdao = DefaultDBFactory.factory(getContext()).createReminderDAO();
			return false;
		}
		removes insert(Uri uri, ContentValues values);
		adds @Override public Uri insert(Uri uri, ContentValues values) {
			try {
				Reminder reminder = new Reminder();
				Category category = cdao.findCategory(values.getAsString(category()));
				reminder.setCategory(category);
				reminder.setText(values.getAsString(text()));
				reminder.setDate(values.getAsString(date()));
				reminder.setHour(values.getAsString(hour()));
				Long id = rdao.saveReminder(reminder);
				getContext().getContentResolver().notifyChange(uri, null);
				return Uri.parse(BASE_PATH + "/" + id);
			}
			catch(DBException e) {
				throw new RuntimeException(e.getLocalizedMessage());
			}
		}
	}
	modifies br.unb.cic.reminders.model.db.DBFactory {
		adds public abstract CategoryDAO createCategoryDAO();
	}
	modifies br.unb.cic.reminders.model.db.DBHelper {
		removes onCreate(SQLiteDatabase db);
		adds @Override public void onCreate(SQLiteDatabase db) {
			try {
				for (String sql : DBConstants.CREATE_TABLE_STATEMENTS) {
					Log.i(DBHelper.class.getCanonicalName(), sql);
					db.execSQL(sql);
				}
	
				for (String sql : DBConstants.PREDEFINED_CATEGORIES) {
					Log.i(DBHelper.class.getCanonicalName(), sql);
					db.execSQL(sql);
				}
			} catch (SQLiteException e) {
				Log.v(DBHelper.class.getName(), e.getMessage());
			}
		}
	}
	adds {
		package br.unb.cic.reminders.model.db;
		
		import java.util.List;
		
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.model.Category;
		
		/**
		 * A Data Access Object for handling the persistence mechanism of categories.
		 *
		 * @author rbonifacio
		 */
		public interface CategoryDAO {
		
			/**
			 * List all Categories of the Reminders database.
			 *
			 * @return list of registered categories.
			 * @throws DBException
			 *             if anything goes wrong with the database query
			 */
			public List<Category> listCategories() throws DBException;
		
			/**
			 * Find a category by name
			 *
			 * @param name
			 *            category name
			 * @return category that satisfies the name criteria
			 */
			public Category findCategory(String name) throws DBException;
		
			/**
			 * Find a category by id
			 *
			 * @param id
			 *            category id
			 * @return category that satisfies the id criteria
			 */
			public Category findCategoryById(Long id) throws DBException;
		}
	}
	adds {
		package br.unb.cic.reminders.model.db;
		
		import java.util.ArrayList;
		import java.util.List;
		
		import android.content.Context;
		import android.database.Cursor;
		import android.database.sqlite.SQLiteException;
		import android.util.Log;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.framework.persistence.DBInvalidEntityException;
		import br.unb.cic.framework.persistence.GenericDAO;
		import br.unb.cic.reminders.model.Category;
		
		/**
		 * A default implementation of the @see {@link CategoryDAO} interface.
		 *
		 * @author rbonifacio
		 */
		public class DefaultCategoryDAO extends GenericDAO<Category> implements CategoryDAO {
		
			public DefaultCategoryDAO(Context c) {
				super(c);
			}
		
			/**
			 * @see CategoryDAO#listCategories()
			 */
			public List<Category> listCategories() throws DBException {
				try {
					db = dbHelper.getReadableDatabase();
					Cursor cursor = db.rawQuery(DBConstants.SELECT_CATEGORIES, null);
		
					List<Category> categories = new ArrayList<Category>();
		
					if (cursor.moveToFirst()) {
						do {
							Category category = cursorToCategory(cursor);
							categories.add(category);
						} while (cursor.moveToNext());
					}
					cursor.close();
					return categories;
				} catch (SQLiteException e) {
					Log.e(DefaultCategoryDAO.class.getCanonicalName(), e.getLocalizedMessage());
					throw new DBException();
				} finally {
					db.close();
					dbHelper.close();
				}
			}
		
			/**
			 * @see CategoryDAO#findCategory(String)
			 */
			public Category findCategory(String name) throws DBException {
				try {
					db = dbHelper.getReadableDatabase();
					Cursor cursor = db.rawQuery(DBConstants.SELECT_CATEGORY_BY_NAME, new String[] { name });
		
					return returnUniqueCategory(cursor);
				} catch (SQLiteException e) {
					Log.e(DefaultCategoryDAO.class.getCanonicalName(), e.getLocalizedMessage());
					throw new DBException();
				} finally {
					db.close();
					dbHelper.close();
				}
			}
		
			/**
			 * @see CategoryDAO#findCategoryById(Long)
			 */
			public Category findCategoryById(Long id) throws DBException {
				try {
					db = dbHelper.getReadableDatabase();
					Cursor cursor = db.rawQuery(DBConstants.SELECT_CATEGORY_BY_ID, new String[] { id.toString() });
		
					return returnUniqueCategory(cursor);
				} catch (SQLiteException e) {
					Log.e(DefaultCategoryDAO.class.getCanonicalName(), e.getLocalizedMessage());
					throw new DBException();
				} finally {
					db.close();
					dbHelper.close();
				}
			}
		
			/*
			 * Given a cursor, returns the first category.
			 */
			private Category returnUniqueCategory(Cursor cursor) {
				List<Category> categories = new ArrayList<Category>();
		
				if (cursor.moveToFirst()) {
					Category category = cursorToCategory(cursor);
					categories.add(category);
					cursor.close();
					return categories.get(0);
				}
				return null;
			}
		
			/*
			 * Creates a category from a given cursor.
			 */
			private Category cursorToCategory(Cursor cursor) {
				Long pk = cursor.getLong(cursor.getColumnIndex(DBConstants.CATEGORY_PK_COLUMN));
				String name = cursor.getString(cursor.getColumnIndex(DBConstants.CATEGORY_NAME_COLUMN));
		
				Category category = new Category();
				category.setName(name);
				category.setId(pk);
		
				return category;
			}
		}
	}
	modifies br.unb.cic.reminders.model.db.DefaultDBFactory {
		adds @Override public CategoryDAO createCategoryDAO() {
			return new DefaultCategoryDAO(context);
		}
	}
	modifies br.unb.cic.reminders.model.db.DefaultReminderDAO {
		adds import br.unb.cic.reminders.model.Category;
		adds public List<Reminder> listRemindersByCategory(Category category) throws DBException {
			try {
				db = dbHelper.getReadableDatabase();
				Cursor cursor = db.rawQuery(DBConstants.SELECT_REMINDERS_BY_CATEGORY,
						new String[] { category.getId().toString() });
	
				return remindersFromCursor(cursor);
			} catch (Exception e) {
				Log.e(DefaultCategoryDAO.class.getCanonicalName(), e.getLocalizedMessage());
				throw new DBException();
			} finally {
				db.close();
				dbHelper.close();
			}
		}
		removes listReminders();
		adds public List<Reminder> listReminders() throws DBException {
			try {
				db = dbHelper.getReadableDatabase();
				Cursor cursor = db.rawQuery(DBConstants.SELECT_REMINDERS, null);
				return remindersFromCursor(cursor);
			}
			catch(Exception e) {
				Log.e(DefaultCategoryDAO.class.getCanonicalName(), e.getLocalizedMessage());
				throw new DBException();
			}
			finally {
				db.close();
				dbHelper.close();
			}
		}
		removes deleteReminder(Reminder reminder);
		adds public void deleteReminder(Reminder reminder) throws DBException {
			try {
				db = dbHelper.getWritableDatabase();
				db.delete(DBConstants.REMINDER_TABLE, DBConstants.REMINDER_PK_COLUMN + "="
					+ reminder.getId(), null);
			}
			catch(SQLiteException e) {
				Log.e(DefaultCategoryDAO.class.getCanonicalName(), e.getLocalizedMessage());
				throw new DBException();
			}
			finally {
				db.close();
				dbHelper.close();
			}
		}
		removes cursorToReminder(Cursor cursor);
		adds private Reminder cursorToReminder(Cursor cursor) throws DBException {
			Long pk =
			cursor.getLong(cursor.getColumnIndex(DBConstants.REMINDER_PK_COLUMN));
			String text =
			cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_TEXT_COLUMN));
			String details =
			cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_DETAILS_COLUMN));
			String date =
			cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_DATE_COLUMN));
			String hour =
			cursor.getString(cursor.getColumnIndex(DBConstants.REMINDER_HOUR_COLUMN));
			int done =
			cursor.getInt(cursor.getColumnIndex(DBConstants.REMINDER_DONE_COLUMN));
			Long categoryId = cursor.getLong(cursor.getColumnIndex(DBConstants.REMINDER_FK_CATEGORY_COLUMN));

			Category category = DBFactory.factory(context).createCategoryDAO().findCategoryById(categoryId);
			Reminder reminder = new Reminder();
			reminder.setText(text);
			reminder.setDetails(details);
			reminder.setId(pk);
			reminder.setDate(date);
			reminder.setHour(hour);
			reminder.setDone(done);
			reminder.setCategory(category);
			return reminder;
		}
	}
	modifies br.unb.cic.reminders.model.db.ReminderDAO {
		adds import br.unb.cic.reminders.model.Category;
		adds public List<Reminder> listRemindersByCategory(Category category) throws DBException;
	}
	adds {
		package br.unb.cic.reminders.model;
		
		import br.unb.cic.framework.persistence.DBTypes;
		import br.unb.cic.framework.persistence.annotations.Column;
		import br.unb.cic.framework.persistence.annotations.Entity;
		
		/**
		 * This class represents a categegory, an useful abstraction for classifying
		 * reminders.
		 *
		 * @author rbonifacio
		 */
		@Entity(table = "CATEGORY")
		public class Category {
			@Column(column = "PK", type = DBTypes.LONG, primaryKey = true)
			private Long id;
		
			@Column(column = "NAME", type = DBTypes.TEXT)
			private String name;
		
			@Column(column = "LOCKED", type = DBTypes.INT)
			private int locked;
		
			public Category() {
			}
		
			public Category(Long id, String name) {
				this.id = id;
				this.name = name;
				this.locked = 0;
			}
		
			public Category(Long id, String name, int locked) {
				this.id = id;
				this.name = name;
				this.locked = locked;
			}
		
			public Long getId() {
				return id;
			}
		
			public void setId(Long id) {
				this.id = id;
			}
		
			public String getName() {
				return name;
			}
		
			public void setName(String name) {
				if (name.isEmpty() == true)
					throw new InvalidTextException(name);
				else
					this.name = name;
			}
		
			public int getLocked() {
				return locked;
			}
		
			public void setLocked(int locked) {
				this.locked = locked;
			}
		
			@Override
			public String toString() {
				return name;
			}
		}
	}
	modifies br.unb.cic.reminders.model.Reminder {
		adds @Column(column = "FK_CATEGORY", type = DBTypes.LONG)
			@ForeignKey(mappedBy = "id")
			private Category category;
		adds public Category getCategory() {
			return category;
		}
		adds public void setCategory(Category category) {
			this.category = category;
		}
		removes isValid();
		adds public boolean isValid() {
			return(text != null && category != null && date != null && hour != null);
		}
	}
	modifies br.unb.cic.reminders.ReminderMainActivity {
		adds import br.unb.cic.reminders.view.FilterListFragment;
		removes createUI();
		adds private void createUI() {
			FragmentTransaction ft = getFragmentManager().beginTransaction();
			ReminderListFragment listReminderFragment = new ReminderListFragment();
			FilterListFragment listCategoryFragment = new FilterListFragment();
			listCategoryFragment.addListener(listReminderFragment);
			ft.add(R.id.listReminders, listReminderFragment);
			ft.add(R.id.listCategories, listCategoryFragment);
			ft.commit();
		}
	}
	modifies br.unb.cic.reminders.EditReminderActivity {
		adds import br.unb.cic.reminders.model.Category;
		modifies initializeValues() {
			String categoryName = intent.getStringExtra("category_name");
			String categoryId = intent.getStringExtra("category_id");
			Category category = new Category();
			category.setId(Long.parseLong(categoryId));
			category.setName(categoryName);
			try {
				spinnerCategory.setSelection(categoryToIndex(category));
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			original();
		}
		removes persist(Reminder reminder);
		adds @Override protected void persist(Reminder reminder) {
			try {
				Category category = findCategory(reminder.getCategory());
				reminder.setCategory(category);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	
			try {
				Controller.instance(getApplicationContext()).updateReminder(reminder);
			} catch (DBException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		adds private int categoryToIndex(Category category) throws Exception {
			List<Category> categories = Controller.instance(getApplicationContext()).listCategories();
			int i = 0;
			for (Category c : categories) {
				if (c.getName().equals(category.getName())) {
					return i;
				}
				i++;
			}
			return 0;
		}
		adds private Category findCategory(Category category) throws Exception {
			List<Category> categories = Controller.instance(getApplicationContext()).listCategories();
			for (Category c : categories) {
				if (c.getName().equals(category.getName()))
					return c;
			}
			return null;
		}
	}
	adds {
		package br.unb.cic.reminders.view;
		
		import java.util.List;
		
		import android.content.Context;
		import android.view.LayoutInflater;
		import android.view.View;
		import android.view.ViewGroup;
		import android.widget.ArrayAdapter;
		import android.widget.LinearLayout;
		import android.widget.TextView;
		import br.unb.cic.reminders.model.Category;
		import br.unb.cic.reminders2.R;
		
		public class CategoryArrayAdapter extends ArrayAdapter<Category> {
		
			private Context context;
		
			/**
			 * This class is used in the parts of the view which is needed to list the
			 * categories, as an adapter to these components listing the Categories
			 * items.
			 *
			 * @param context,
			 *            and the reminders objects(List<Category>).
			 *
			 * @author positivo
			 *
			 */
			public CategoryArrayAdapter(Context context, List<Category> objects) {
				super(context, R.layout.category_row, objects);
				this.context = context;
			}
		
			@Override
			public View getView(int position, View convertView, ViewGroup parent) {
				LinearLayout categoryRow;
		
				// Inflate the view
				if (convertView == null) {
					categoryRow = new LinearLayout(getContext());
					String inflater = Context.LAYOUT_INFLATER_SERVICE;
					LayoutInflater vi;
					vi = (LayoutInflater) getContext().getSystemService(inflater);
					vi.inflate(R.layout.category_row, categoryRow, true);
				} else {
					categoryRow = (LinearLayout) convertView;
				}
		
				TextView tvCategory = (TextView) categoryRow.findViewById(R.id.row_categoryName);
		
				tvCategory.setText(getItem(position).getName());
		
				return categoryRow;
			}
		
		}
	}
	modifies br.unb.cic.reminders.view.AddReminderActivity {
		adds import br.unb.cic.reminders.model.Category;
		removes persist(Reminder reminder);
		adds @Override protected void persist(Reminder reminder) {
			try {
				Category category = findCategory(reminder.getCategory());
				reminder.setCategory(category);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	
			try {
				Controller.instance(getApplicationContext()).updateReminder(reminder);
			} catch (DBException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		adds private Category findCategory(Category category) throws Exception {
			List<Category> categories = Controller.instance(getApplicationContext()).listCategories();
			for (Category c : categories) {
				if (c.getName().equals(category.getName()))
					return c;
			}
			return null;
		}
	}
	modifies br.unb.cic.reminders.view.ExternalAddReminderActivity {
		adds import br.unb.cic.reminders.model.Category;
		adds private Category newCategory = null;
		removes setReminderFromIntent();
		adds private void setReminderFromIntent() throws Exception {
			Intent intent = getIntent();
			String action = intent.getAction();
			String type = intent.getType();
			if(action.equals("br.com.positivo.reminders.ADD_REMINDER") &&
				"text/plain".equals(type)) {
				String text = intent.getStringExtra("text");
				String details = intent.getStringExtra("details");
				String categoryName = intent.getStringExtra("category_name");
				String date = intent.getStringExtra("date");
				String hour = intent.getStringExtra("hour");
				List<Category> categories = Controller.instance(getApplicationContext()).listCategories();
				for (Category c : categories) {
					if (c.getName().equals(categoryName)) {
						newCategory = c;
						break;
					}
				}
				reminder.setText(text);
				reminder.setDetails(details);
				reminder.setDate(date);
				reminder.setHour(hour);
				reminder.setCategory(newCategory);
			}
			else reminder = null;
		}
		modifies initializeValues() {
			if(! reminder.isValid()) return;
			edtReminder.setText(reminder.getText());
			edtDetails.setText(reminder.getDetails());
			updateSpinnerDateHour(spinnerDate, reminder.getDate());
			updateDateFromString(reminder.getDate());
			updateSpinnerDateHour(spinnerTime, reminder.getHour());
			updateTimeFromString(reminder.getHour());
			try {
				spinnerCategory.setSelection(categoryToIndex(reminder.getCategory()));
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		adds @Override protected List<Category> getCategories() throws Exception {
			List<Category> categories = super.getCategories();
			return categories;
		}
		adds private Category findCategory(Category category) throws Exception {
			List<Category> categories = Controller.instance(getApplicationContext()).listCategories();
			for (Category c : categories) {
				if (c.getName().equals(category.getName()))
					return c;
			}
			return null;
		}
		adds private int categoryToIndex(Category category) throws Exception {
			List<Category> categories = Controller.instance(getApplicationContext()).listCategories();
			int i = 0;
			for (Category c : categories) {
				if (c.getName().equals(category.getName())) {
					return i;
				}
				i++;
			}
			return 0;
		}
	}
	adds {
		package br.unb.cic.reminders.view;
		
		import java.util.ArrayList;
		import java.util.List;
		
		import android.app.Fragment;
		import android.os.Bundle;
		import android.util.Log;
		import android.view.ContextMenu;
		import android.view.ContextMenu.ContextMenuInfo;
		import android.view.LayoutInflater;
		import android.view.MenuInflater;
		import android.view.View;
		import android.view.ViewGroup;
		import android.widget.AdapterView;
		import android.widget.AdapterView.OnItemClickListener;
		import android.widget.Button;
		import android.widget.ListView;
		import br.unb.cic.framework.persistence.DBException;
		import br.unb.cic.reminders.controller.AllRemindersFilter;
		import br.unb.cic.reminders.controller.CategoryFilter;
		import br.unb.cic.reminders.controller.Controller;
		import br.unb.cic.reminders.controller.ReminderFilter;
		import br.unb.cic.reminders.model.Category;
		import br.unb.cic.reminders2.R;
		
		/**
		 * A list fragment that holds the list of categories.
		 *
		 * @author rbonifacio
		 */
		public class FilterListFragment extends Fragment implements OnItemClickListener {
		
			private static final String CURRENT_FILTER_KEY = "current_filter";
		
			private static String TAG = "filter fragment list";
		
			private int currentFilterIndex;
		
			private List<FiltersListChangeListener> listeners;
		
			private FiltersListChangeListener filtersChangeListener;
		
			private int currentFilterId;
			// Used to list the filters.
			private ReminderFilterArrayAdapter adapter;
			private View view;
		
			private Button btAddCategory;
			private ListView lvFilters;
		
			@Override
			public void onActivityCreated(Bundle savedInstanceState) {
				super.onActivityCreated(savedInstanceState);
		
				// this way, we could retrieve the selected filter
				// after an orientation change.
				if (savedInstanceState != null) {
					currentFilterIndex = savedInstanceState.getInt(CURRENT_FILTER_KEY);
				}
		
				/*
				 * categoryList = new ArrayList<String>();
				 *
				 * setListAdapter(new ArrayAdapter<String>(getActivity(),
				 * R.layout.list_content));
				 *
				 * ListView thisListView = getListView();
				 *
				 * categoriesArrayAdapter = (ArrayAdapter<String>)getListAdapter();
				 *
				 * thisListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
				 * thisListView.setBackgroundColor(Color.WHITE);
				 */
		
				currentFilterId = 0;
		
				adapter = null;
			}
		
			/**
			 * Creates the view.
			 */
			@Override
			public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
				view = inflater.inflate(R.layout.categories_list_fragment, container, false);
				createUI();
				return view;
			}
		
			/**
			 * When resumed updates the filters list view.
			 */
			@Override
			public void onResume() {
				super.onResume();
				updateListView();
			}
		
			/**
			 * Creates the context menu where shows the Edit and Delete options.
			 */
			// @Override
			public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
				super.onCreateContextMenu(menu, v, menuInfo);
		
				menu.setHeaderTitle(R.string.context_menu_category_title);
		
				MenuInflater inflater = getActivity().getMenuInflater();
				inflater.inflate(R.menu.category_list_fragment_context_menu, menu);
			}
		
			/**
			 * Provides each action based in the chosen option(Edit or Delete).
			 **/
			/*
			 * @Override public boolean onContextItemSelected(MenuItem item) {
			 *
			 * if(item.getGroupId() == R.id.context_menu_category) { //Used to verify if
			 * it is the right context_menu //Gets the item position and gets the
			 * category in that position: AdapterView.AdapterContextMenuInfo info =
			 * (AdapterView.AdapterContextMenuInfo)item.getMenuInfo(); Category category
			 * = (Category)lvCategory.getAdapter().getItem(info.position);
			 *
			 * //Switch between the options in the context menu(Edit and Delete) switch
			 * (item.getItemId()) { case R.id.edit: //Passes the current reminder to be
			 * edited via Intent and Invokes edit method DialogFragment newFragment =
			 * new EditCategoryDialogFragment(category);
			 * newFragment.show(getFragmentManager(),
			 * ""+R.string.dialog_editcategory_title); updateListView(); return true;
			 * case R.id.delete: //Invokes delete method try {//Deletes from the bank;
			 * Controller
			 * .instance(getActivity().getApplicationContext()).deleteCategory(
			 * category); } catch (DBException e) { Log.e(TAG,e.getMessage()); }
			 * updateListView(); return true; default: return
			 * super.onContextItemSelected(item); }
			 *
			 * } return super.onContextItemSelected(item); }
			 */
		
			public void addListener(FiltersListChangeListener filter) {
				if (listeners == null)
					listeners = new ArrayList<FiltersListChangeListener>();
				listeners.add(filter);
			}
		
			public void notifyListeners(ReminderFilter filter) {
				for (FiltersListChangeListener c : listeners) {
					c.onSelectedFilterChanged(filter);
				}
			}
		
			/**
			 * Creates the User Interface.
			 **/
			private void createUI() {
		
				// Button to add a Category:
				// btAddCategory = (Button) view.findViewById(R.id.btAddCategory);
				// btAddCategory.setOnClickListener(new OnClickListener() {
				//
				// public void onClick(View v) {// Creates one DialogFragment to add a
				// // category
				// DialogFragment newFragment = new AddCategoryDialogFragment();
				// newFragment.show(getFragmentManager(), ""
				// + R.string.dialog_addcategory_title);
				// }
				// });
		
				// List of filters
				lvFilters = (ListView) view.findViewById(R.id.listCategories);
				lvFilters.setOnItemClickListener(this);
				registerForContextMenu(lvFilters);
				updateListView();
			}
		
			/**
			 * Used to populate the list view with the current filters and other
			 * filters.
			 */
			private void updateListView() {
		
				List<ReminderFilter> filters = new ArrayList<ReminderFilter>();
		
				// Add the allReminders to the filter list
				AllRemindersFilter allRemindersFilter = new AllRemindersFilter(getActivity());
				filters.add(allRemindersFilter);
		
				// Get all categories
				List<Category> categories = new ArrayList<Category>();
				try {
					categories = Controller.instance(getActivity().getApplicationContext()).listCategories();
					notifyListeners(null);
				} catch (DBException e) {
					Log.e(CURRENT_FILTER_KEY, "STORAGE_SERVICE error. Message: " + e.getMessage()); // TODO:
																									// Handle
																									// it
																									// properly.
					e.printStackTrace();
				} catch (Exception e) {
					Log.e(CURRENT_FILTER_KEY, "STORAGE_SERVICE error. Message: " + e.getMessage()); // TODO:
																									// Handle
																									// it
																									// properly.
					e.printStackTrace();
				}
		
				// Add the categories to the filter list
				ReminderFilter filter;
				for (Category c : categories) {
					filter = new CategoryFilter(c, getActivity());
					filters.add(filter);
				}
		
				adapter = new ReminderFilterArrayAdapter(getActivity().getApplicationContext(), filters);
		
				lvFilters.setAdapter(adapter);
			}
		
			public void onItemClick(AdapterView<? extends Object> adapterView, View view, int position, long id) {
				notifyListeners(adapter.getItem(position));
		
			}
		
			public void onNothingSelected(AdapterView<? extends Object> arg0) {
				// TODO Auto-generated method stub
		
			}
		
		}
	}
	modifies br.unb.cic.reminders.view.ReminderListFragment {
		removes onContextItemSelected(MenuItem item);
		adds @Override public boolean onContextItemSelected(MenuItem item) {
			if(item.getGroupId() == R.id.context_menu_reminder) {
				AdapterView.AdapterContextMenuInfo info = (
				AdapterView.AdapterContextMenuInfo ) item.getMenuInfo();
				Reminder reminder = ( Reminder ) contextMenuAdapter.getItem(info.position);
				switch(item.getItemId()) {
					case R.id.edit : Intent editIntent = new
					Intent(getActivity().getApplicationContext(), EditReminderActivity.class);
					editIntent.putExtra("id", reminder.getId());
					editIntent.putExtra("text", reminder.getText());
					editIntent.putExtra("details", reminder.getDetails());
					editIntent.putExtra("category_name", reminder.getCategory().getName());
					editIntent.putExtra("category_id", Long.toString(reminder.getCategory().getId()));
					editIntent.putExtra("date", reminder.getDate());
					editIntent.putExtra("hour", reminder.getHour());
					startActivity(editIntent);
					updateListView(null);
					return true;
					case R.id.delete : try {
						Controller.instance(getActivity().getApplicationContext()).deleteReminder(reminder);
					}
					catch(DBException e) {
						Log.e(TAG, e.getMessage());
					}
					updateListView(null);
					return true;
					default : return super.onContextItemSelected(item);
				}
			}
			return super.onContextItemSelected(item);
		}
	}
	modifies br.unb.cic.reminders.view.ReminderActivity {
		adds import br.unb.cic.reminders.model.Category;
		adds protected Spinner spinnerCategory;
		modifies initializeFields() {
			original();
			try {
				spinnerCategory = getSpinnerCategory();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		modifies initializeListeners() {
			original();
			addListenerToSpinnerCategory();
		}
		adds private void addListenerToSpinnerCategory() {
			spinnerCategory.setOnItemSelectedListener(new OnItemSelectedListener() {
				public void onItemSelected(AdapterView<? extends Object> parent, View view, int pos, long id) {}
	
				public void onNothingSelected(AdapterView<? extends Object> parent) {
					// well... do nothing
				}
			});
		}
		removes createReminder();
		adds private void createReminder() {
			try {
				reminder.setText(edtReminder.getText().toString());
				reminder.setDetails(edtDetails.getText().toString());
				reminder.setDate(dateToString());
				reminder.setHour(timeToString());
				reminder.setCategory((Category) spinnerCategory.getSelectedItem());
			}
			catch(InvalidTextException e) {
				Toast.makeText(getApplicationContext(), "Texto invalido.",
					Toast.LENGTH_SHORT).show();
			}
			catch(InvalidDateException e) {
				Toast.makeText(getApplicationContext(), "Data invalida.",
					Toast.LENGTH_SHORT).show();
			}
			catch(InvalidHourException e) {
				Toast.makeText(getApplicationContext(), "Hora invalida.",
					Toast.LENGTH_SHORT).show();
			}
			catch(Exception e) {
				Toast.makeText(getApplicationContext(), "Erro grave.",
					Toast.LENGTH_SHORT).show();
			}
		}
		adds private Spinner getSpinnerCategory() throws Exception {
			Spinner spinner = (Spinner) findViewById(R.id.spinnerCategories);
	
			SpinnerAdapterGenerator<Category> adapterCategoryGenerator = new SpinnerAdapterGenerator<Category>();
	
			List<Category> categories = getCategories();
	
			ArrayAdapter<Category> adapter = adapterCategoryGenerator.getSpinnerAdapter(categories, this);
	
			spinner.setAdapter(adapter);
	
			return spinner;
		}
		adds protected List<Category> getCategories() throws Exception {
			return Controller.instance(getApplicationContext()).listCategories();
		}
		adds protected Spinner getSpinnerCategory(List<Category> categories) throws Exception {
			Spinner spinner = (Spinner) findViewById(R.id.spinnerCategories);
	
			SpinnerAdapterGenerator<Category> adapterCategoryGenerator = new SpinnerAdapterGenerator<Category>();
	
			spinner.setAdapter(adapterCategoryGenerator.getSpinnerAdapter(categories, this));
	
			return spinner;
		}
	}
	modifies br.unb.cic.reminders.view.ReminderAddActivity {
		adds import br.unb.cic.reminders.model.Category;
		adds private Category selectedCategory;
		adds private Spinner spinnerCategory;
		modifies configureActionListener() {
			original();
			addListenerToSpinnerCategory();
		}
		adds private void addListenerToSpinnerCategory() {
			spinnerCategory.setOnItemSelectedListener(new OnItemSelectedListener() {
				public void onItemSelected(AdapterView<? extends Object> parent, View view, int pos, long id) {
					// get the category from the spinner
					selectedCategory = (Category) parent.getItemAtPosition(pos);
				}
	
				public void onNothingSelected(AdapterView<? extends Object> parent) {
					// well... do nothing
				}
			});
		}
		removes createReminder();
		adds private Reminder createReminder() {
			/*
			 * Since view's not passing all the information yet (priority ...), we
			 * instantiate a reminder initially passing only "text" and "date".
			 */
			Reminder reminder = new Reminder();
			try {
				reminder.setText(edtReminder.getText().toString());
				reminder.setDetails(edtDetails.getText().toString());
				reminder.setDate(edtDate.getText().toString());
				reminder.setHour(edtHour.getText().toString());
				reminder.setCategory(selectedCategory);
			} catch (InvalidTextException e) {
				Toast.makeText(getApplicationContext(), "Texto invalido.", Toast.LENGTH_SHORT).show();
			} catch (InvalidDateException e) {
				Toast.makeText(getApplicationContext(), "Data invalida.", Toast.LENGTH_SHORT).show();
			} catch (InvalidHourException e) {
				Toast.makeText(getApplicationContext(), "Hora invalida.", Toast.LENGTH_SHORT).show();
			}
			return reminder;
		}
		removes getExistingReminder();
		adds private Reminder getExistingReminder() {
			Reminder reminder = null;
			Intent intent = getIntent();
			String action = intent.getAction();
			String type = intent.getType();
			if(Intent.ACTION_SEND.equals(action) && "text/plain".equals(type)) {
				previewReminderId = intent.getLongExtra("id", 0);
				String text = intent.getStringExtra("text");
				String categoryName = intent.getStringExtra("category_name");
				String categoryId = intent.getStringExtra("category_id");
				String date = intent.getStringExtra("date");
				String hour = intent.getStringExtra("hour");
				reminder = new Reminder();
				reminder.setText(text);
				Category category = new Category();
				category.setName(categoryName);
				category.setId(Long.parseLong(categoryId));
				reminder.setCategory(category);
				reminder.setDate(date);
				reminder.setHour(hour);
				reminder.setId(previewReminderId);
			}
			return reminder;
		}
		removes getReminderFromIntent();
		adds private Reminder getReminderFromIntent() {
			Intent intent = getIntent();
			String action = intent.getAction();
			String type = intent.getType();
			if("br.com.positivo.reminders.ADD_REMINDER".equals(action) &&
				"text/plain".equals(type)) {
				try {
					String text = intent.getStringExtra("text");
					String details = intent.getStringExtra("details");
					String category = intent.getStringExtra("category");
					String date = intent.getStringExtra("date");
					String hour = intent.getStringExtra("hour");
					Reminder reminder = new Reminder();
					reminder.setText(text);
					reminder.setDetails(details);
					Category auxCategory = new Category();
					auxCategory.setName(category);
					reminder.setCategory(auxCategory);
					reminder.setDate(date);
					reminder.setHour(hour);
					return reminder;
				}
				catch(InvalidFormatException e) {
				}
			}
			return null;
		}
		removes initialize(Reminder reminder);
		adds private void initialize(Reminder reminder) {
			try {
				edtReminder = ( EditText ) findViewById(R.id.edtReminder);
				edtDetails = ( EditText ) findViewById(R.id.edtDetails);
				spinnerCategory = getSpinnerCategory();
				if(reminder != null) {
					updateFieldsFromReminder(reminder);
				}
				btnSave = ( Button ) findViewById(R.id.btnSave);
				btnCancel = ( Button ) findViewById(R.id.btnCancel);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		modifies updateFieldsFromReminder(Reminder reminder) {
			original(reminder);
			spinnerCategory.setSelection(categoryToIndex(reminder.getCategory()));
		}
		adds private Spinner getSpinnerCategory() throws Exception {
			Spinner spinner = (Spinner) findViewById(R.id.spinnerCategories);
	
			SpinnerAdapterGenerator<Category> adapterCategoryGenerator = new SpinnerAdapterGenerator<Category>();
	
			List<Category> categories = Controller.instance(getApplicationContext()).listCategories();
	
			spinner.setAdapter(adapterCategoryGenerator.getSpinnerAdapter(categories, this));
	
			return spinner;
		}
		adds private int categoryToIndex(Category category) throws Exception {
			List<Category> categories = Controller.instance(getApplicationContext()).listCategories();
			int i = 0;
			for (Category c : categories) {
				if (c.getName().equals(category.getName())) {
					return i;
				}
				i++;
			}
			return 0;
		}
	}
	modifies br.unb.cic.reminders.view.ReminderFilterArrayAdapter {
		removes ReminderFilterArrayAdapter(Context context, List<ReminderFilter> objects);
		adds public ReminderFilterArrayAdapter(Context context, List<ReminderFilter> objects) {
			super(context, R.layout.category_row, objects);
		}
		removes getView(int position, View convertView, ViewGroup parent);
		adds @Override public View getView(int position, View convertView, ViewGroup parent) {
			LinearLayout filterRow;
	
			// Inflate the view
			if (convertView == null) {
				filterRow = new LinearLayout(getContext());
				String inflater = Context.LAYOUT_INFLATER_SERVICE;
				LayoutInflater vi;
				vi = (LayoutInflater) getContext().getSystemService(inflater);
				vi.inflate(R.layout.category_row, filterRow, true);
			} else {
				filterRow = (LinearLayout) convertView;
			}
	
			TextView tvFilter = (TextView) filterRow.findViewById(R.id.row_categoryName);
			tvFilter.setText(getItem(position).getName());
	
			TextView tvNumReminders = (TextView) filterRow.findViewById(R.id.row_categoryCounter);
			tvNumReminders.setText(Integer.toString(getItem(position).getNumReminders()));
	
			return filterRow;
		}
	}
}
