delta dCategory {
	modifies br.unb.cic.reminders.model.db.DBConstants {
		removes DROP_TABLE_STATEMENTS;
		adds public static String DROP_TABLE_STATEMENTS[] = { "DROP TABLE IF EXISTS REMINDER", "DROP TABLE IF EXISTS CATEGORY" };
		
		removes CREATE_TABLE_STATEMENTS;
		adds public static String CREATE_TABLE_STATEMENTS[] = { "CREATE TABLE CATEGORY("
			+ "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "NAME VARCHAR(50) NOT NULL, " + "LOCKED INT NOT NULL);",

			"CREATE TABLE REMINDER ( " + "PK INTEGER PRIMARY KEY AUTOINCREMENT, " + "TEXT VARCHAR(50) NOT NULL,"
					+ "DETAILS VARCHAR(50) NULL,"
					+ "FK_CATEGORY INTEGER NOT NULL REFERENCES CATEGORY ON DELETE CASCADE," + "DATE CHAR(10) NULL,"
					+ "HOUR CHAR(5) NULL," + "DONE INTEGER NOT NULL);", };
		
		adds public static final String SELECT_CATEGORIES = "SELECT PK, NAME FROM CATEGORY";
		adds public static final String SELECT_CATEGORY_BY_NAME = "SELECT PK, NAME FROM CATEGORY WHERE NAME = ?";
		adds public static final String SELECT_CATEGORY_BY_ID = "SELECT PK, NAME FROM CATEGORY WHERE PK = ?";
		
		removes SELECT_REMINDERS;
		adds public static final String SELECT_REMINDERS = "SELECT PK, TEXT, DETAILS, FK_CATEGORY, DATE, HOUR, DONE FROM REMINDER";
		adds public static final String SELECT_REMINDERS_BY_CATEGORY = "SELECT PK, TEXT, DETAILS, FK_CATEGORY, DATE, HOUR, DONE FROM REMINDER WHERE FK_CATEGORY = ?";
		adds public static String DELETE_CATEGORIES = "DELETE FROM CATEGORY WHERE PK = ?";
		
		adds public static final String PREDEFINED_CATEGORIES[] = { "INSERT INTO CATEGORY VALUES (NULL,'Faculdade',1);",
			"INSERT INTO CATEGORY VALUES (NULL,'Trabalho',1);", "INSERT INTO CATEGORY VALUES (NULL,'Pessoal',1);" };

		adds public static String CATEGORY_TABLE = "CATEGORY";
		adds public static String CATEGORY_PK_COLUMN = "PK";
		adds public static String CATEGORY_NAME_COLUMN = "NAME";
		adds public static String CATEGORY_LOCKED_COLUMN = "LOCKED";
		
		adds public static String REMINDER_FK_CATEGORY_COLUMN = "FK_CATEGORY";
	}
	modifies br.unb.cic.framework.persistence.GenericDAO {
		adds import br.unb.cic.reminders.model.db.DefaultCategoryDAO;
		
		removes persist(T entity);
		adds protected Long persist(T entity) throws DBInvalidEntityException, DBException {
			try {
				db = dbHelper.getWritableDatabase();
				ContentValues values = new ContentValues();
				if(! entity.getClass().isAnnotationPresent(Entity.class)) {
					throw new DBInvalidEntityException(entity);
				}
				String tableName = entity.getClass().getAnnotation(Entity.class).table();
				boolean update = false;
				String updateWhereClause = null;
				for(Field f : entity.getClass().getDeclaredFields()) {
					if(f.isAnnotationPresent(Column.class)) {
						String column = f.getAnnotation(Column.class).column();
						boolean pk = f.getAnnotation(Column.class).primaryKey();
						String methodName = getMethod(f.getName());
						Class args [] = {
						};
						Method m = entity.getClass().getDeclaredMethod(methodName, args);
						Object value = m.invoke(entity, args);
						if(f.isAnnotationPresent(ForeignKey.class)) {
							String fk = f.getAnnotation(ForeignKey.class).mappedBy();
							methodName = getMethod(fk);
							m = value.getClass().getDeclaredMethod(methodName, args);
							value = m.invoke(value, args);
						}
						if(value != null) {
							values.put(column, value.toString());
						}
						else {
							values.putNull(column);
						}
						if(pk && value != null) {
							update = true;
							updateWhereClause = column + " = " + value.toString();
						}
					}
				}
				Long id = null;
				db.beginTransaction();
				if(! update) {
					id = db.insert(tableName, null, values);
				}
				else {
					db.update(tableName, values, updateWhereClause, null);
				}
				db.setTransactionSuccessful();
				return id;
			}
			catch(Exception e) {
				e.printStackTrace();
				Log.e(DefaultCategoryDAO.class.getCanonicalName(), e.getLocalizedMessage());
				throw new DBException();
			}
			finally {
				if(db.inTransaction()) {
					db.endTransaction();
				}
				db.close();
				dbHelper.close();
			}
		}
				
	}
	adds {
		package br.unb.cic.reminders.controller;
		
		import android.content.Context;
		import br.unb.cic.reminders.model.Category;
		import br.unb.cic.reminders.model.Reminder;
		
		public class CategoryFilter extends ReminderFilter {
		
			private Category category;
		
			public CategoryFilter(Category category, Context context) {
				super(context);
				this.category = category;
			}
		
			@Override
			protected boolean selectReminder(Reminder r) {
				return r.getCategory().getName().equals(category.getName());
			}
		
			public Category getCategory() {
				return category;
			}
		
			@Override
			public String getName() {
				return category.getName();
			}
		
		}
	}
	modifies br.unb.cic.reminders.controller.Controller {
		adds import br.unb.cic.reminders.model.Category;
		adds public List<Category> listCategories() throws Exception {
			try {
				return DBFactory.factory(context).createCategoryDAO().listCategories();
			} catch (DBException e) {
				// TODO: we need to define what to do in these situations.
				throw e;
			}
		}
		adds public Category findCategory(Long id) throws Exception {
			return DBFactory.factory(context).createCategoryDAO().findCategoryById(id);
		}
		adds public Category findCategory(String name) throws Exception {
			return DBFactory.factory(context).createCategoryDAO().findCategory(name);
		}
		adds public List<Reminder> listRemindersByCategory(Category category) throws Exception {
			try {
				return DBFactory.factory(context).createReminderDAO().listRemindersByCategory(category);
			} catch (DBException e) {
				// TODO: we need to define what to do in these situations.
				throw e;
			}
		}
		adds public Category getCategory(String name) throws DBException {
			try {
				List<Category> categories = DBFactory.factory(context).createCategoryDAO().listCategories();
				for (Category c : categories) {
					if (c.getName().equals(name))
						return c;
				}
				return null;
			} catch (DBException e) {
				// TODO: we need to define what to do in these situations.
				throw e;
			}
		}
	}
	modifies br.unb.cic.reminders.model.cp.ReminderContentProvider {
		adds import br.unb.cic.reminders.model.Category;
		adds import br.unb.cic.reminders.model.db.CategoryDAO;
		adds public static final String category() {
			return DBConstants.CATEGORY_NAME_COLUMN;
		}
		adds private CategoryDAO cdao;
		modifies onCreate() {
			cdao = DefaultDBFactory.factory(getContext()).createCategoryDAO();
			rdao = DefaultDBFactory.factory(getContext()).createReminderDAO();
			return false;
		}
		removes insert(Uri uri, ContentValues values);
		adds @Override public Uri insert(Uri uri, ContentValues values) {
			try {
				Reminder reminder = new Reminder();
				Category category = cdao.findCategory(values.getAsString(category()));
				reminder.setCategory(category);
				reminder.setText(values.getAsString(text()));
				reminder.setDate(values.getAsString(date()));
				reminder.setHour(values.getAsString(hour()));
				Long id = rdao.saveReminder(reminder);
				getContext().getContentResolver().notifyChange(uri, null);
				return Uri.parse(BASE_PATH + "/" + id);
			}
			catch(DBException e) {
				throw new RuntimeException(e.getLocalizedMessage());
			}
		}
	}
	modifies br.unb.cic.reminders.model.db.DBFactory {
		adds public abstract CategoryDAO createCategoryDAO();
	}
}
